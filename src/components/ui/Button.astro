---
// src/components/ui/Button.astro
interface Props {
  id: string;           // ✅ Required for uniqueness and targeting
  label: string;        // ✅ Required for accessibility, tracking

  type?: 'button' | 'submit' | 'reset';
  variant?: 'primary' | 'secondary' | 'plain';
  className?: string;

  ariaLabel?: string;
  ariaExpanded?: boolean;
  ariaControls?: string;
  ariaPressed?: boolean;

  disabled?: boolean;
  title?: string;
  name?: string;
  value?: string;
  form?: string;

  dataAction?: string;
  dataLabel?: string;
  dataTargets?: string; // Optional for tracking or targeting
}

const {
  id,
  label,

  type = 'button',
  variant = 'primary',
  className = '',

  ariaLabel,
  ariaExpanded,
  ariaControls,
  ariaPressed,

  disabled = false,
  title,
  name,
  value,
  form,

  dataAction,
  dataLabel,
  dataTargets,
} = Astro.props;

const variantClassMap = {
  primary: 'button col-base-00 hover-col-base-100 hover-fill-base-100 bg-primary hover-bg-base-00 transition focus-vis-bg-primary-lighter focus-vis-col-base-100',
  secondary: 'button bg-transparent border-2 col-primary hover-col-base-100 hover-fill-base-100 border-2 hover-bg-primary-light transition focus-vis-bg-primary focus-vis-col-base-00',
  plain: 'button bg-transparent col-inherit hover-bg-primary-lighter hover-col-base-100 hover-fill-base-100 transition focus-vis-bg-primary focus-vis-col-base-100',
};

const variantClass = variantClassMap[variant] ?? '';
const computedClass = `${variantClass} ${className}`.trim();

// Shared fallback label for all purposes
const resolvedLabel = label;

// Filter only defined optional attributes
const extraAttributes = {
  'aria-label': ariaLabel ?? resolvedLabel,
  'aria-expanded': ariaExpanded,
  'aria-controls': ariaControls,
  'aria-pressed': ariaPressed,
  'title': title ?? resolvedLabel,
  'name': name,
  'value': value,
  'form': form,
  'data-action': dataAction ?? 'button-click',
  'data-label': dataLabel ?? resolvedLabel,
  'data-targets': dataTargets,
};
/*
<Button id="btn-submit" label="Submit">Submit</Button>
Icon-left + text
<Button id="btn-download" label="Download File">
  <svg slot="icon-left" width="16" height="16"><use href="#icon-download" /></svg>
  Download
</Button>
Icon-only button
<Button id="btn-settings" label="Settings">
  <svg slot="icon-left" width="20" height="20"><use href="#icon-settings" /></svg>
</Button>
*/
---
<button
  id={id}
  type={type}
  class={computedClass}
  disabled={disabled}
  {...Object.fromEntries(Object.entries(extraAttributes).filter(([_, val]) => val !== undefined))}
>
  <slot name="icon-left" />
  <slot />
  <slot name="icon-right" />
</button>
