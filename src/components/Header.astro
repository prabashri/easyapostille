---
import Anchor from "./ui/Anchor.astro";
import Button from "./ui/Button.astro";
import { siteNav, primaryCTA, secondaryNavigation, headerStyle } from '../config/navigation'
import Logo from './navigation/Logo.astro'
import ThemeLightDark from './navigation/ThemeLightDark.astro';
import { Icon } from 'astro-icon/components';
import NavLinkItem from './navigation/NavLinkItem.astro';
import NavButton from './navigation/NavButton.astro';


const modeMap = {
  default: '',
  glassy: 'bg-transparent backdrop-blur',
  transparent: 'bg-transparent',
  'primary-light': 'bg-primary-light col-base-100',
  'primary-dark': 'bg-primary-dark col-base-00',
  custom: ''
}
 const modeMapNav = {
  default: '',
  glassy: 'big-bg-glass big-border-glass big-box-shadow',
  transparent: 'bg-transparent',
  'primary-light': 'bg-primary-light col-base-100',
  'primary-dark': 'bg-primary-dark col-base-00',
  custom: ''
}

const positionMap = {
  static: '',
  sticky: 'sticky top-0 z-100',
  fixed: 'fixed top-0 left-0 w-full z-100'
}

const separatorMap = {
  shadow: 'shadow-md',
  border: 'border-b border-gray-200',
  none: 'box-shadow-bottom'
}

const commonHeaderClasses = 'flex flex-col ai-center jc-center gap mi-auto pi-1 pb-05';
const headerClasses = [
  commonHeaderClasses,
  modeMap[headerStyle.mode],
  positionMap[headerStyle.position],
  separatorMap[headerStyle.separator ?? 'none'],
  headerStyle.width === 'sitewidth' ? 'w-site' : 'w-full',
]
.filter(Boolean)
.join(' ')

const navClasses = [
  modeMapNav[headerStyle.mode],
].filter(Boolean).join(' ');

const navOrder = ( (siteNav && siteNav.length > 0 ) && primaryCTA && primaryCTA.length > 0 ) ? "lg-w-full order-2 lg-order-3" : "order-2 lg-order-2";

---
<style id="header-css" is:global>
svg use {
	pointer-events: none
}


.active-page {
    /* background-color: var(--primary-lighter); */
    color: var(--primary);
    /*text-underline-offset: 5px;*/
    /*text-underline-position: under;*/
    /*text-decoration: underline;*/
}
/* Dropdown Base */
.dropdown-menu {
  display: none;
  opacity: 0;
  visibility: hidden;
  transform: translateY(10px);
  transition: opacity 0.3s ease, transform 0.3s ease, visibility 0.3s ease;
  pointer-events: none;
}

/* Dropdown Visible - Opened by JS (.open class) */
.dropdown-menu.open {
  display: flex;
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
  pointer-events: auto;
}

/* Dropdown Visible - Opened via hover or JS (.dropdown-active) */
.dropdown.dropdown-active .dropdown-menu,
.dropdown-active .dropdown-menu {
  display: flex;
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
  pointer-events: auto;
}

/* Hover animation for dropdown arrow */
.dropdown:hover .hover-down-arrow-rotate,
.dropdown-toggle.active .hover-down-arrow-rotate {
  transform: rotate(180deg);
  transition: transform 0.3s ease-in-out;
  fill: currentColor;
}

/* Hover-based dropdown reveal on desktop */
@media (hover: hover) and (pointer: fine) {
  .dropdown:hover .dropdown-menu {
    display: flex;
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
    pointer-events: auto;
  }
}


.sm-display {
  display: block
}
.no-border {
  border: none
}
.big-display-block {
  display: none
}
.mx-w-width, .mx-w-site{
  max-width: var(--site-width)
}
.main-nav.mobile-active {
  display: flex;
  flex-direction: column;
  background-color: var(--bg); /* optional styling */
}
.sm-bg{
  background-color: var(--background-color);
}
.sm-display-inherit, .full-display-none, .display {
  display: inherit 
}
.big-display-inherit, .sm-display-none, .display-none {
  display: none 
}
.logo-bg{
  fill:#fefaff
}
@media (min-width: 768px) {
		.md-ai-center {
	    align-items:center;	
    }
    .sm-display {
        display: none;
    }
     .big-display-block {
    display: block
  }

  .sm-display-inherit, .full-display-none {
  display: none;
  }
  .big-display-inherit, .sm-display-none {
    display: inherit
  }
  .big-absolute{
    position: absolute !important;
  }


}

@media (max-width: 768px) {
	.main-nav {
		left: 0;
		top: 100%;
		width: 100%
	}

	.main-nav.active {
		display: flex
	}
  .main-nav.mobile-active {
		display: flex
	}
   .main-nav {
    display: none !important;
    overflow-y:scroll;
  }
  .sm-w-full {
    width: 100%;
  }
  .main-nav.is-open {
    display: flex !important;
    flex-direction: column;
  }
  #main-nav,
  #main-nav-cta,
  #secondary-nav {
    display: none !important;
  }

  #main-nav.is-open,
  #main-nav-cta.is-open,
  #secondary-nav.is-open {
    display: flex !important;
    flex-direction: column;
  }

  #main-nav-cta.is-open {
    align-items: flex-start;    
  }
.scroll-container::-webkit-scrollbar {
  width: 8px;
}

.scroll-container::-webkit-scrollbar-thumb {
  background-color: rgba(100, 100, 100, 0.3);
  border-radius: 4px;
}

.scroll-container::-webkit-scrollbar-track {
  background: transparent;
}
.scroll-container {
  scrollbar-width: thin; /* or 'auto' */
  scrollbar-color: rgba(100, 100, 100, 0.3) transparent;
}
.scroll-container {
  max-height: 60vh;
  overflow-y: scroll; /* forces scrollbar even if not needed */
  scrollbar-gutter: stable; /* prevents layout shift when scrolling starts */
}
.sm-br{
  border-radius: var(--border-radius);
}

}


header a{
  text-decoration:none
}



</style>

<header class={headerClasses}>
  <div class="flex flex-row mx-w-site w-full relative gap-05 mi-auto ai-center">
    {/* LOGO */}
    <div class="flex flex-row wrap gap-05 mx-w-site w-full mb-0 ai-center jc-space-between">
      <Logo />
      {/* Mobile Menu Toggle */}
      <Button
        id="menu-toggle"
        label="Toggle Menu"
        className="menu-toggle sm-display-inherit h-40 w-40 mb-05 order-2"
        aria-label="Toggle Menu"
        type="button"
        variant="plain"
        aria-controls="main-nav main-nav-cta secondary-nav"
        aria-expanded="false"
        data-targets="#main-nav,#main-nav-cta,#secondary-nav"
      >
        <Icon name="hamburger" id="menu-icon" class="block fill-base-100 w-1-5 h-1-5" />
        <Icon name="close" id="close-icon" class="display-none fill-base-100 w-1-5 h-1-5" />
      </Button>

      {/* NAV ITEMS */}
      {siteNav.length > 0 && (
      <nav id="main-nav" class={`main-nav sm-bg scroll-container flex flex-row text-small ${navClasses} p-05 gap br-1 sm-br col-base-100 z-1000 big-display-inherit ${navOrder}`} itemscope itemtype="https://schema.org/SiteNavigationElement" aria-label="Primary site navigation">
        {/* Logo for Desktop */}
        <ul class="nav-list flex ai-center no-bullets gap sm-flex-col sm-ai-start">
        {/* Loop through siteNav items */}
        {Array.isArray(siteNav) && siteNav.map((item, navIndex) => (           
            <li
              itemprop="name"
              class={`nav-item${item.type === 'dropdown' || item.type === 'mega' ? ' dropdown' : ''}${item.type === 'link' ? ' nav-link' : ''}${item.href === Astro.url.pathname ? ' active-page' : ''}`}
              data-id={`nav-item-${navIndex}`}
            >
              {/* Icon or Image */}
              {/* Link or Button based on item type */}
              {item.type === 'link' && (
                <NavLinkItem
                  index={navIndex}
                  item={item}
                />
              )}
             
              {item.type === 'dropdown' && item.content && (
                <NavButton 
                  index={navIndex}
                  item={item}
                /> 
                <div
                  id={`dropdown-menu-${navIndex}`}
                  role="menu"
                  aria-hidden="true"
                  class="dropdown-menu pb-1 bg-transparent static big-absolute top-70 z-1000"
                >
                  <div class="bg-base-00 p-1 flex flex-col wrap gap br big-b-thin-primary-lighter">
                    {Array.isArray(item.content) && item.content.map((subItem, subItemIndex) => (
                      <NavLinkItem
                        item={subItem} index={subItemIndex}
                      />                        
                    ))}
                  </div>
                </div>               
              )}

              {/* Mega Menu */}

              {item.type === 'mega' && Array.isArray(item.columns) && (
                <NavButton 
                  index={navIndex}
                  item={item}
                />                
             
                <div
                  id={`dropdown-menu-${navIndex}`}
                  role="menu"
                  aria-hidden="true" 
                  class="dropdown-menu mega-menu-panel pb-1 bg-col-ff static big-absolute top-70 left-0 z-1000 w-full"
                >
                  <div class="bg-base-00 sm-bg p-05 br flex flex-row wrap w-full gap big-b-thin-primary-lighter">
                    {item.columns.map((col, colIndex) => (
                      <div data-id={`mega-col-${navIndex}-${colIndex}`} class="mega-column mn-w-250 flex flex-col flex-1 gap-05">
                        <h4 class="bold capitalize text-s mb-2">{col.title}</h4>
                        <ul>
                          {Array.isArray(col.items) && col.items.map((subItem, subItemIndex) => (
                            <li data-id={`mega-item-${navIndex}-${colIndex}-${subItemIndex}`} class="mb-1">
                              <NavLinkItem
                                item={subItem}
                              />
                            </li>
                          ))}
                        </ul>
                      </div>
                    ))}
                  </div>
                </div>                
              )}
            </li>
          ))}
        </ul>
      </nav>
      )}
      {/* Primary CTA Button */}
      {primaryCTA.length > 0 && ( 
        <div id="main-nav-cta" class="flex br sm-bg sm-w-full p-05 ai-center gap-05 order-3 lg-order-2" aria-label="Primary Call to Action">
          {/* Loop through primaryCTA items */}
          {primaryCTA.map((cta) => (
            <Anchor
              href={cta.href}
              title={cta.title || cta.label}
              variant={cta.variant || 'primary'}
              ariaLabel={cta.ariaLabel || cta.label}
              className={cta.icon ? 'flex ai-center ac-center gap-05' : ''}
            >
              {cta.icon && <img src={cta.icon} alt={cta.altText || cta.label} width="24" class="w-20 inline" />}
              {cta.label}
            </Anchor>
          ))}
        </div>
      )}
     
    </div>
    {/* Theme Toggle */}
    <ThemeLightDark />
  </div>
  {/* SECONDARY NAVIGATION (Optional) */}
  {secondaryNavigation.length > 0 && (
    <nav id="secondary-nav" class="secondary-nav sm-bg flex flex-row text-xs p-05 br gap z-10 mx-w-site w-full desktop-box-shadow-bottom big-display-inherit" aria-label="Secondary site navigation" itemscope itemtype="https://schema.org/SiteNavigationElement">
      {/* Loop through secondaryNavigation items */}
      <ul class="nav-list flex ai-center no-bullets gap sm-flex-col sm-ai-start">
        {Array.isArray(secondaryNavigation) && secondaryNavigation.map((item, navIndex) => (
          <li
            itemprop="name"
            class={`sec-nav-item${item.type === 'dropdown' || item.type === 'mega' ? ' dropdown' : ''}${item.type === 'link' ? ' nav-link' : ''}${item.href === Astro.url.pathname ? ' active-page' : ''}`}
            data-id={`sec-nav-item-${navIndex}`}
          >
              {/* Icon or Image */}
              {/* Link or Button based on item type */}
              {( !item.type || item.type === 'link' ) && (
                <NavLinkItem
                  index={navIndex}
                  item={item}
                />
              )}
             
              {item.type === 'dropdown' && item.content && (
                <NavButton 
                  index={navIndex}
                  item={item}
                /> 
                <div
                  id={`dropdown-menu-${navIndex}`}
                  role="menu"
                  aria-hidden="true"
                  class="dropdown-menu pb-1 bg-transparent static big-absolute top-70 z-1000"
                >
                  <div class="bg-base-90 col-base-00 p-1 flex flex-col wrap gap br">
                    {Array.isArray(item.content) && item.content.map((subItem, subItemIndex) => (
                      <NavLinkItem
                        item={subItem} index={subItemIndex}
                      />                        
                    ))}
                  </div>
                </div>               
              )}

              {/* Mega Menu */}

              {item.type === 'mega' && Array.isArray(item.columns) && (
                <NavButton 
                  index={navIndex}
                  item={item}
                />                
             
                <div
                  id={`dropdown-menu-${navIndex}`}
                  role="menu"
                  aria-hidden="true"
                  class="dropdown-menu mega-menu-panel pb-1 bg-col-ff static big-absolute top-70 left-0 z-1000 w-full"
                >
                  <div class="bg-base-00 sm-bg p-1 br flex flex-row wrap w-full gap big-b-thin-primary-lighter">
                    {item.columns.map((col, colIndex) => (
                      <div data-id={`mega-col-${navIndex}-${colIndex}`} class="mega-column mn-w-250 flex flex-col flex-1 gap-05">
                        <h4 class="bold capitalize text-s mb-2">{col.title}</h4>
                        <ul>
                          {Array.isArray(col.items) && col.items.map((subItem, subItemIndex) => (
                            <li data-id={`mega-item-${navIndex}-${colIndex}-${subItemIndex}`} class="mb-1">
                              <NavLinkItem
                                item={subItem}
                              />
                            </li>
                          ))}
                        </ul>
                      </div>
                    ))}
                  </div>
                </div>                
              )}
            </li>
        ))}
      </ul>
    </nav>
  )}
</header>
<script type="module">
  'use strict';
(() => {
  
  document.addEventListener('DOMContentLoaded', () => {
    const toggleBtn = document.getElementById('menu-toggle');
    const targetIds = ['main-nav', 'main-nav-cta', 'secondary-nav'];

    const hamburgerIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');

    const selector = toggleBtn.getAttribute('data-targets');
    const targets = selector
    ? selector.split(',').map((s) => document.querySelector(s.trim())).filter(Boolean)
    : [];
console.log('Targets:', targets.map((t) => t?.id));

    const navItems = document.querySelectorAll('.nav-item.dropdown');
    const activeClass = 'dropdown-active';
    let isDesktop = window.matchMedia('(min-width: 768px)').matches;

    // Cache dropdown buttons and menus
    navItems.forEach(item => {
      item._button = item.querySelector('button[data-action]');
      item._menu = item.querySelector('.dropdown-menu');
    });

    // Toggle mobile menu (hamburger)
     toggleBtn.addEventListener('click', () => {
      const isOpen = targets[0]?.classList.contains('is-open');
      const willOpen = !isOpen;

      targets.forEach((el) => el.classList.toggle('is-open', willOpen));
      toggleBtn.setAttribute('aria-expanded', String(willOpen));
      hamburgerIcon?.classList.toggle('display-none', willOpen);
      closeIcon?.classList.toggle('display-none', !willOpen);
    });


    // Dropdown open/close logic
    const openMenu = (item) => {
      item.classList.add(activeClass);
      item._menu?.setAttribute('aria-hidden', 'false');
      item._button?.setAttribute('aria-expanded', 'true');
    };

    const closeMenu = (item) => {
      item.classList.remove(activeClass);
      item._menu?.setAttribute('aria-hidden', 'true');
      item._button?.setAttribute('aria-expanded', 'false');
    };

    const closeAllMenusExcept = (exceptItem) => {
      navItems.forEach(item => {
        if (item !== exceptItem) closeMenu(item);
      });
    };

    const setupNavBehavior = () => {
      navItems.forEach(item => {
        const button = item._button;
        const menu = item._menu;
        if (!button || !menu) return;

        // Cleanup previous listeners
        item.removeEventListener('mouseenter', item._hoverIn);
        item.removeEventListener('mouseleave', item._hoverOut);
        button.onclick = null;

        if (isDesktop) {
          // Hover behavior
          item._hoverIn = () => openMenu(item);
          item._hoverOut = () => closeMenu(item);
          item.addEventListener('mouseenter', item._hoverIn);
          item.addEventListener('mouseleave', item._hoverOut);

          // Click toggles
          button.onclick = (e) => {
            e.preventDefault();
            const isOpen = item.classList.contains(activeClass);
            if (isOpen) {
              closeMenu(item);
            } else {
              closeAllMenusExcept(item);
              openMenu(item);
            }
          };

          // Focus management
          button.addEventListener('focusout', (e) => {
            setTimeout(() => {
              if (!item.contains(document.activeElement)) closeMenu(item);
            }, 100);
          });

        } else {
          // Mobile click-only toggle
          button.onclick = (e) => {
            e.preventDefault();
            const isOpen = item.classList.contains(activeClass);
            if (isOpen) {
              closeMenu(item);
            } else {
              closeAllMenusExcept(item);
              openMenu(item);
            }
          };
        }
      });
    };

    // Initial setup
    setupNavBehavior();

    // Throttled resize listener
    let resizeTimeout;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        const newIsDesktop = window.matchMedia('(min-width: 768px)').matches;
        if (newIsDesktop !== isDesktop) {
          isDesktop = newIsDesktop;
          setupNavBehavior();
        }
      }, 150);
    });

    // Close all dropdowns when clicking outside
    document.addEventListener('click', (e) => {
      navItems.forEach(item => {
        if (!item.contains(e.target)) closeMenu(item);
      });
    });
  });
})();
</script>