---
import { siteDefaults } from '../config/siteDefaults';
import { parseToIsoString } from '../utils/date-utils';
import CssHead from './CssHead.astro';
import type { HeadProps } from '../types/HeadProps';
import Rss from './Rss.astro';
import ImagePreload from './ImagePreload.astro';
import InlineScript from './InlineScript.astro';


import { getImageMeta } from '../utils/getImageMeta';
import Schema from './Schema.astro';


const isDev = import.meta.env.DEV;

// Determine fallback author(s) based on organization type
let fallbackAuthors: { name: string; url: string }[] = [];

if (siteDefaults.organization.type === 'Organization' && siteDefaults.organization.incharge?.name) {
  fallbackAuthors = [{
    name: siteDefaults.organization.incharge.name,
    url: siteDefaults.organization.incharge.url ?? siteDefaults.organization.url
  }];
} 
else if (siteDefaults.organization.type === 'Person') {
  fallbackAuthors = [{
    name: siteDefaults.organization.name,
    url: siteDefaults.organization.url
  }];
}

const props: HeadProps = {
  ...Astro.props,
  title: Astro.props.title ?? siteDefaults.title,
  description: Astro.props.description ?? siteDefaults.description,
  image: Astro.props.image,
  type: Astro.props.type ?? 'webpage',
  url: Astro.props.url ?? Astro.url.toString(),
  siteName: Astro.props.siteName ?? siteDefaults.siteName,
  authors: (Astro.props.authors?.length > 0 ? Astro.props.authors : fallbackAuthors),
  publishedAt: Astro.props.publishedAt ?? siteDefaults.publishedDate,
  updatedAt: Astro.props.updatedAt,
  index: Astro.props.index ?? true,
  keywords: Astro.props.keywords ?? siteDefaults.keywords,
  faq: Astro.props.faq ?? [],
  listItems: Astro.props.listItems ?? [],
  canonicalUrl: Astro.props.canonicalUrl
};

// Canonical URL
const canonicalURL = new URL(
  props.canonicalUrl ?? Astro.url.pathname,
  siteDefaults.siteUrl
).toString();

// Destructure props for use in head
const {
  title,
  description,
  image,
  type,
  url,
  siteName,
  authors,
  publishedAt,
  updatedAt,
  index,
  keywords,
  faq,
  listItems
} = props;

function getImageKeyFromPublicUrl(src?: string): string | undefined {
  if (!src) return undefined;
  // Remove leading slash and `/images/` directory
  return src.replace(/^\/+/, '').replace(/^images\//, '');
}

const imageMeta = getImageMeta(getImageKeyFromPublicUrl(image));
const imageUrl = imageMeta?.url || '';
const imageWidth = imageMeta?.width || 0;
const imageHeight = imageMeta?.height || 0;

const datePublished = parseToIsoString(publishedAt ?? siteDefaults.publishedDate);
const dateModified = parseToIsoString(updatedAt);

const rssEnabled = siteDefaults.rss === true;
const sitemapEnabled = siteDefaults.sitemap === true;
---
{/** ðŸ”¹ Primary Page Title */}
<title>{title}</title>

{/** ðŸ”¹ Favicons & Manifest */}
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="apple-touch-icon" href="/apple-touch-icon.png" />
<link rel="manifest" href="/manifest.webmanifest" />
<meta name="theme-color" content="#0d9488" />
<meta name="application-name" content={siteDefaults.siteName} />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="mobile-web-app-capable" content="yes" />

{/** ðŸ”¹ Robots & Referrer */}
{ !isDev && <meta name="robots" content={index ? "index, follow" : "noindex, nofollow"} /> }
<meta name="referrer" content="strict-origin-when-cross-origin" />

{/** ðŸ”¹ CSS */}
<CssHead />
{/** ðŸ”¹ Preload Images */}
<ImagePreload />


{/** ðŸ”¹ Canonical */}
<link rel="canonical" href={canonicalURL} />

{/** ðŸ”¹ Primary SEO Meta */}
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="keywords" content={(keywords ?? []).join(', ')} />

{/** ðŸ”¹ Author Meta */}
{authors.length > 0
  ? authors.map(a => <meta name="author" content={a.name} />)
  : <meta name="author" content={siteDefaults.admin.name} />}
{authors.length > 0
  ? authors.map(a => <meta property="article:author" content={a.url ?? siteDefaults.organization.url} />)
  : <meta property="article:author" content={siteDefaults.organization.url} />}

{/** ðŸ”¹ Open Graph */}
<meta property="og:type" content={type} />
<meta property="og:site_name" content={siteName} />
<meta property="og:url" content={url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={imageUrl} />
<meta property="og:image:width" content={imageWidth.toString()} />
<meta property="og:image:height" content={imageHeight.toString()} />
{type === 'article' && (
  <>
    <meta property="article:published_time" content={datePublished} />
    <meta property="article:modified_time" content={dateModified} />
  </>
)}

{/** ðŸ”¹ Twitter */}
<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:site" content={siteDefaults.socialLinks.x} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={description} />
<meta name="twitter:image" content={imageUrl} />

{/** ðŸ”¹ Sitemap & RSS */}
{ sitemapEnabled && <link rel="sitemap" type="application/xml" href="/sitemap.xml" /> }
{ rssEnabled && <Rss /> }

{/** ðŸ”¹ Inline Scripts */}
<InlineScript />

<Schema
  type={type}
  authors={authors}
  image={imageUrl}
  title={title}
  description={description}
  url={url}
  publishedAt={publishedAt}
  updatedAt={updatedAt}
  faq={faq}
  listItems={listItems}
/>
