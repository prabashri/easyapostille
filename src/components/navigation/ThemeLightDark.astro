---
// src/components/navigation/ThemeLightDark.astro
import { Icon } from 'astro-icon/components';
---

<div class="theme-toggle flex relative h-2-0 w-2-0 ai-center jc-center"> 

    <!-- Trigger Button -->
    <button id="theme-button" aria-haspopup="true" aria-expanded="false"
      class="round box-shadow-glow transition p-02">
      <Icon name="system" class="w-1-5 h-1-5" />
      <Icon name="light" class="w-1-5 h-1-5 display-none" />
      <Icon name="moon" class="w-1-5 h-1-5 display-none" />
    </button>

    <!-- Dropdown -->
    <div id="theme-menu"
      class="relative big-absolute br border bg-base-00 col-base-100 mb-05 box-shadow display-none right-0 p-05 z-1000">
      <button class="theme-option flex ai-center gap full-width text-left mx-w-320 mn-w-160 ac-center pi-05 mb-05 mi-02 bg-transparent hover-bg-primary-light col-inherit hover-col-base-00 full-width jc-start"
        data-theme="system">
        <Icon name="system" class="w-1-5 h-1-5" />
        <span>OS Default</span>
      </button>
      <button class="theme-option flex ai-center gap full-width text-left mx-w-320 mn-w-160 ac-center pi-05 mb-05 mi-02 bg-transparent hover-bg-primary-light col-inherit hover-col-base-00 full-width jc-start"
        data-theme="light">
        <Icon name="light" class="w-1-5 h-1-5" />
        <span>Light</span>
      </button>
      <button class="theme-option flex ai-center gap full-width text-left mx-w-320 mn-w-160 ac-center pi-05 mb-05 mi-02 bg-transparent hover-bg-primary-light col-inherit hover-col-base-00 full-width jc-start"
        data-theme="dark">
        <Icon name="moon" class="w-1-5 h-1-5" />
        <span>Dark</span>
      </button>
    </div>
  </div>

 <script id="theme-script" type="module">
(() => {
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.getElementById('theme-button');
    const menu = document.getElementById('theme-menu');
    const options = document.querySelectorAll('.theme-option');

    const iconSystem = document.querySelector('svg[data-icon="system"]');
    const iconLight = document.querySelector('svg[data-icon="light"]');
    const iconDark = document.querySelector('svg[data-icon="moon"]');

    const showIcon = (theme) => {
      if (!iconSystem || !iconLight || !iconDark) return;

      iconSystem.classList.add('display-none');
      iconLight.classList.add('display-none');
      iconDark.classList.add('display-none');

      if (theme === 'light') {
        iconLight.classList.remove('display-none');
      } else if (theme === 'dark') {
        iconDark.classList.remove('display-none');
      } else {
        iconSystem.classList.remove('display-none');
      }
    };

    const applyTheme = (theme) => {
      if (theme === 'light' || theme === 'dark') {
        document.documentElement.setAttribute('data-theme', theme);
        showIcon(theme);
      } else {
        // fallback to system preference
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const fallbackTheme = prefersDark ? 'dark' : 'light';
        document.documentElement.setAttribute('data-theme', fallbackTheme);
        showIcon('system');
      }
    };

    const setTheme = (theme) => {
      localStorage.setItem('theme', theme);
      applyTheme(theme);
    };

    const getStoredTheme = () => {
      const stored = localStorage.getItem('theme');
      if (stored === 'light' || stored === 'dark' || stored === 'system') {
        return stored;
      }
      return 'light'; // force fallback to light if invalid
    };

    const toggleMenu = () => {
      const isExpanded = button?.getAttribute('aria-expanded') === 'true';
      button?.setAttribute('aria-expanded', String(!isExpanded));
      menu?.classList.toggle('display-none', isExpanded);
    };

    const closeMenu = () => {
      menu?.classList.add('display-none');
      button?.setAttribute('aria-expanded', 'false');
    };

    // Event: Toggle menu
    button?.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleMenu();
    });

    // Event: Close menu on outside click
    document.addEventListener('click', (e) => {
      if (!menu?.contains(e.target) && !button?.contains(e.target)) {
        closeMenu();
      }
    });

    // Event: Theme change
    options.forEach((option) => {
      option.addEventListener('click', () => {
        const selected = option.getAttribute('data-theme');
        if (selected) setTheme(selected);
        closeMenu();
      });
    });

    // Apply theme on load
    applyTheme(getStoredTheme());

    // Listen for system preference changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
      if (getStoredTheme() === 'system') {
        applyTheme('system');
      }
    });
  });
})();
</script>
