---
// src/components/navigation/ThemeLightDark.astro
import { Icon } from "astro-icon/components";
---

<div class="theme-toggle flex relative h-2-0 w-2-0 ai-center jc-center">
  <!-- Trigger -->
  <button
    id="theme-button"
    class="round box-shadow-glow transition p-02"
    type="button"
    aria-haspopup="menu"
    aria-expanded="false"
    aria-controls="theme-menu"
  >
    <Icon name="bw" class="w-1-5 h-1-5" aria-hidden="true" focusable="false" />
    <Icon name="light" class="w-1-5 h-1-5 display-none" aria-hidden="true" focusable="false" />
    <Icon name="moon" class="w-1-5 h-1-5 display-none" aria-hidden="true" focusable="false" />
    <span class="sr-only">Theme</span>
  </button>

  <!-- Popup menu -->
  <div
    id="theme-menu"
    class="relative big-absolute br border-primary bg-base-00 col-base-100 mb-05 box-shadow display-none right-0 top-100 p-05 z-1000"
    role="menu"
    aria-labelledby="theme-button"
  >
    <!-- Use non-interactive element + ARIA role -->
    <div class="theme-option flex ai-center gap text-left mx-w-320 mn-w-160 ac-center pi-05 mb-05 mi-02 bg-transparent hover-bg-primary-light col-inherit hover-col-base-00 full-width jc-start"
         role="menuitemradio" aria-checked="false" data-theme="system" tabindex="-1">
      <Icon name="bw" class="w-1-5 h-1-5" aria-hidden="true" />
      <span>OS Default</span>
    </div>

    <div class="theme-option flex ai-center gap text-left mx-w-320 mn-w-160 ac-center pi-05 mb-05 mi-02 bg-transparent hover-bg-primary-light col-inherit hover-col-base-00 full-width jc-start"
         role="menuitemradio" aria-checked="false" data-theme="light" tabindex="-1">
      <Icon name="light" class="w-1-5 h-1-5" aria-hidden="true" />
      <span>Light</span>
    </div>

    <div class="theme-option flex ai-center gap text-left mx-w-320 mn-w-160 ac-center pi-05 mb-05 mi-02 bg-transparent hover-bg-primary-light col-inherit hover-col-base-00 full-width jc-start"
         role="menuitemradio" aria-checked="false" data-theme="dark" tabindex="-1">
      <Icon name="moon" class="w-1-5 h-1-5" aria-hidden="true" />
      <span>Dark</span>
    </div>
  </div>
</div>
<script type="module">
(() => {
  const qs  = (s, r=document) => r.querySelector(s);
  const qsa = (s, r=document) => Array.from(r.querySelectorAll(s));

  const button = qs('#theme-button');
  const menu   = qs('#theme-menu');
  const items  = qsa('.theme-option', menu);

  const iconSystem = qs('svg[data-icon="bw"]');
  const iconLight  = qsa('svg[data-icon="light"]')[0];
  const iconDark   = qsa('svg[data-icon="moon"]')[0];

  const showIcon = (theme) => {
    [iconSystem, iconLight, iconDark].forEach(el => el?.classList.add('display-none'));
    if (theme === 'light') iconLight?.classList.remove('display-none');
    else if (theme === 'dark') iconDark?.classList.remove('display-none');
    else iconSystem?.classList.remove('display-none');
  };

  const applyTheme = (theme) => {
    if (theme === 'light' || theme === 'dark') {
      document.documentElement.setAttribute('data-theme', theme);
      showIcon(theme);
    } else {
      const prefersDark = matchMedia('(prefers-color-scheme: dark)').matches;
      document.documentElement.setAttribute('data-theme', prefersDark ? 'dark' : 'light');
      showIcon('system');
    }
    items.forEach(b => b.setAttribute('aria-checked', String(b.dataset.theme === theme)));
  };

  const setTheme = (theme) => {
    localStorage.setItem('theme', theme);
    applyTheme(theme);
  };

  const getStoredTheme = () => {
    const t = localStorage.getItem('theme');
    return (t === 'light' || t === 'dark' || t === 'system') ? t : 'light';
  };

  const isOpen = () => button?.getAttribute('aria-expanded') === 'true';

  const openMenu = () => {
    button?.setAttribute('aria-expanded', 'true');
    menu?.classList.remove('display-none');
    const current = items.find(b => b.getAttribute('aria-checked') === 'true') || items[0];
    current?.setAttribute('tabindex', '0');
    current?.focus();
  };

  // ⚠️ Modified: accept an option to restore focus
  const closeMenu = (opts = { restoreFocus: true }) => {
    menu?.classList.add('display-none');
    button?.setAttribute('aria-expanded', 'false');
    items.forEach(b => b.setAttribute('tabindex', '-1'));
    if (opts.restoreFocus) button?.focus();
  };

  const toggleMenu = () => (isOpen() ? closeMenu() : openMenu());

  // Helper: clicks in inputs/textareas/selects shouldn’t affect focus
  const isEditable = (t) => {
    if (!t) return false;
    return t.isContentEditable ||
      ['INPUT','TEXTAREA','SELECT'].includes((t.tagName||'').toUpperCase());
  };

  // Pointer
  button?.addEventListener('click', (e) => { e.stopPropagation(); toggleMenu(); });

  // ⚠️ Modified: on outside click, close WITHOUT restoring focus
  document.addEventListener('click', (e) => {
    if (!menu?.contains(e.target) && !button?.contains(e.target)) {
      closeMenu({ restoreFocus: false });
    }
  });

  // Keyboard on trigger
  button?.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowDown' || e.key === 'Enter' || e.key === ' ') {
      e.preventDefault(); openMenu();
    }
  });

  // Keyboard in menu (roving tabindex)
  menu?.addEventListener('keydown', (e) => {
    const idx = items.indexOf(document.activeElement);
    const focusAt = (i) => {
      items[i]?.setAttribute('tabindex','0'); items[i]?.focus();
      items.forEach((b,j)=> j!==i && b.setAttribute('tabindex','-1'));
    };

    if (e.key === 'Escape') { e.preventDefault(); closeMenu({ restoreFocus: true }); }
    else if (e.key === 'ArrowDown') { e.preventDefault(); focusAt((idx+1) % items.length); }
    else if (e.key === 'ArrowUp')   { e.preventDefault(); focusAt((idx-1+items.length) % items.length); }
    else if (e.key === 'Home')      { e.preventDefault(); focusAt(0); }
    else if (e.key === 'End')       { e.preventDefault(); focusAt(items.length-1); }
    else if (e.key === 'Tab')       { closeMenu({ restoreFocus: false }); }
    else if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      const sel = document.activeElement;
      const theme = sel?.getAttribute('data-theme');
      if (theme) setTheme(theme);
      closeMenu({ restoreFocus: true }); // selection returns focus to trigger
    }
  });

  // Click select
  items.forEach((el) => {
    el.addEventListener('click', () => {
      const t = el.getAttribute('data-theme');
      if (t) setTheme(t);
      closeMenu({ restoreFocus: true });
    });
  });

  // Init
  applyTheme(getStoredTheme());

  // OS change when in 'system'
  matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
    if (getStoredTheme() === 'system') applyTheme('system');
  });
})();
</script>
