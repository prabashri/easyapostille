---
import imageMetadataJson from '../data/image-format-details.json';
import { registerPreloadImage } from '../utils/preloadRegistry';
import { siteDefaults } from '../config/siteDefaults';

interface Props {
  src: string;
  alt: string;
  width?: string | number;
  height?: number;
  title?: string;
  className?: string;
  imageClassName?: string;
  caption?: string;
  loading?: 'lazy' | 'eager';
  sizes?: string;
  breakpoints?: { mobile?: number; desktop?: number };
  objectFit?: 'cover' | 'contain' | 'fill' | 'none' | 'scale-down';
}

const {
  src,
  alt,
  title,
  className = '',
  imageClassName = 'inline-image',
  objectFit = 'cover',
  caption,
  loading = 'lazy',
  sizes,
  breakpoints,
  height,
  width
} = Astro.props as Props;

const mobileMax = siteDefaults.breakpoints.mobileMax ?? 768;
const desktopMin = siteDefaults.breakpoints.desktopMin ?? 769;

const fetchPriority = loading === 'eager' ? 'high' : undefined;
const metadata = imageMetadataJson as Record<string, any>;
const data = metadata[src];

let hasData = !!data;
let targetWidth = breakpoints?.desktop ?? (typeof width === 'number' ? width : 320);
let aspectRatio = '1/1';

let basePath = '';
let availableWidths: number[] = [];
let defaultAspect = '';
let formats: string[] = [];
let sizesAttr = sizes;
let width1x = targetWidth;
let width2x = targetWidth * 2;
let imageBaseName = '';
let fallbackSrc = '';
let aspectClass = '';
let widthClassMobile = '';
let widthClassDesktop = '';
let objectFitClass = '';

if (hasData) {
  basePath = `/images${data.path}`;
  availableWidths = data.variants.map(Number).sort((a: number, b: number) => a - b);
  defaultAspect = data.aspect;
  aspectRatio = defaultAspect.replace('x', '/');

  formats = [...data.format].sort((a, b) => (a === 'webp' ? -1 : b === 'webp' ? 1 : 0));

  // Sizes attribute
  if (!sizesAttr && breakpoints) {
    const { mobile = 320, desktop = 640 } = breakpoints;
    sizesAttr = `(max-width: ${mobileMax}px) ${mobile}px, ${desktop}px`;
  }
  if (!sizesAttr) {
    sizesAttr = `(max-width: ${mobileMax}px) 320px, 640px`;
  }

  // Pick width variants
  width1x = availableWidths.find(w => w >= targetWidth) ?? availableWidths[0];
  width2x = availableWidths.find(w => w >= width1x * 2) ?? width1x;

  imageBaseName = src.replace(/^.*[\/]/, '').replace(/\.[^.]+$/, '');
  fallbackSrc = `${basePath}${imageBaseName}-w${width1x}-a${defaultAspect}.${formats[0]}`;

  // Auto classes
  aspectClass = `a-${defaultAspect}`;
  widthClassMobile = `w-${breakpoints?.mobile ?? 320}`;
  widthClassDesktop = `big-w-${breakpoints?.desktop ?? 640}`;
  objectFitClass = `of-${objectFit}`;
}

// Preload
if (loading === 'eager' && hasData) {
  const format = formats[0];
  const buildSrc = (w: number) => `${basePath}${imageBaseName}-w${w}-a${defaultAspect}.${format}`;
  const mobileBP = breakpoints?.mobile ?? 320;
  const desktopBP = breakpoints?.desktop ?? mobileBP;
  const mWidth = availableWidths.find(w => w >= mobileBP) ?? availableWidths[0];
  const dWidth = availableWidths.find(w => w >= desktopBP) ?? mWidth;
  registerPreloadImage({ src: buildSrc(mWidth), media: `(max-width: ${mobileMax}px)` });
  if (dWidth !== mWidth) {
    registerPreloadImage({ src: buildSrc(dWidth), media: `(min-width: ${desktopMin}px)` });
  }
}
---

{!hasData ? (
  <div class={`flex ai-center jc-center bg-base-20 ${className} ${aspectClass} ${widthClassMobile} ${widthClassDesktop} h-fit`}>
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 225" id="svg-placeholder" class={`w-full h-auto ${imageClassName} ${objectFitClass}`}>
      <path fill="red" d="M0 0h400v225H0Z" class="icon-background fill-primary-lighter"></path>
    </svg>
    <span id="svg-placeholder-text" class="absolute fill-primary bold text-base">{siteDefaults.siteName}</span>
  </div>
) : (
  <>
    {caption ? (
      <figure class={`block image-wrapper ${className} ${aspectClass} ${widthClassMobile} ${widthClassDesktop} h-fit`}>
        <picture>
          {formats.filter(f => f !== formats[0]).map(format => (
            <source
              type={`image/${format === 'jpg' ? 'jpeg' : format}`}
              srcset={`${basePath}${imageBaseName}-w${width1x}-a${defaultAspect}.${format} 1x, ${basePath}${imageBaseName}-w${width2x}-a${defaultAspect}.${format} 2x`}
            />
          ))}
          <img
            src={fallbackSrc}
            srcset={`${basePath}${imageBaseName}-w${width1x}-a${defaultAspect}.${formats[0]} 1x, ${basePath}${imageBaseName}-w${width2x}-a${defaultAspect}.${formats[0]} 2x`}
            sizes={sizesAttr}
            width={width ?? width1x}
            height={height}
            alt={alt}
            title={title}
            loading={loading}
            decoding="async"
            fetchpriority={fetchPriority}
            class={`block w-full h-auto br ${imageClassName} ${objectFitClass}`}
          />
        </picture>
        <figcaption class="cg-small">{caption}</figcaption>
      </figure>
    ) : (
      <picture class={`block image-wrapper ${className} ${aspectClass} ${widthClassMobile} ${widthClassDesktop} h-fit`}>
        {formats.filter(f => f !== formats[0]).map(format => (
          <source
            type={`image/${format === 'jpg' ? 'jpeg' : format}`}
            srcset={`${basePath}${imageBaseName}-w${width1x}-a${defaultAspect}.${format} 1x, ${basePath}${imageBaseName}-w${width2x}-a${defaultAspect}.${format} 2x`}
          />
        ))}
        <img
          src={fallbackSrc}
          srcset={`${basePath}${imageBaseName}-w${width1x}-a${defaultAspect}.${formats[0]} 1x, ${basePath}${imageBaseName}-w${width2x}-a${defaultAspect}.${formats[0]} 2x`}
          sizes={sizesAttr}
          width={width ?? width1x}
          height={height}
          alt={alt}
          title={title}
          loading={loading}
          decoding="async"
          fetchpriority={fetchPriority}
          class={`block w-full h-auto br ${imageClassName} ${objectFitClass}`}
        />
      </picture>
    )}
  </>
)}
