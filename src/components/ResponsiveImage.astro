---
import imageMetadataJson from '../data/image-format-details.json';
import { registerPreloadImage } from '../utils/preloadRegistry';
import { registerSchemaImage } from '../utils/registerSchemaImage';
import { siteDefaults } from '../config/siteDefaults';
import { siteImages } from '../config/siteImages';
import { toAbsoluteUrl } from '../utils/toAbsoluteUrl';
import type { ImageFormat, ImageVariant, ImageVariants, ImageBreakpoints } from '../types/imageProps';


interface Props {
  src: string;
  alt: string;
  title?: string;
  caption?: string;
  id?: string;
  className?: string;
  imageClassName?: string;
  loading?: 'lazy' | 'eager' | 'delay';
  variant?: ImageVariant;
  width?: number | string;
  height?: number;
  addSchema?: boolean;
  objectFit?: 'cover' | 'contain' | 'fill' | 'none' | 'scale-down';
}

const {
  src,
  alt,
  title,
  caption,
  id = '',
  className = '',
  imageClassName = 'inline-image',
  variant = 'auto',
  width,
  height,
  loading = 'lazy',
  objectFit = 'cover',
  addSchema = true,
} = Astro.props as Props;

const metadata = imageMetadataJson as Record<string, any>;
const data = metadata[src];
const origin = siteDefaults.siteUrl.replace(/\/$/, '');
const folderPath = siteImages.outputImageBase?.replace(/^\.\/public\//, '') || 'images';

const variants: ImageVariants = siteImages.variants;
const breakpoints: ImageBreakpoints = siteImages.breakpoints;

let imageBaseName = src.replace(/^.*[\/]/, '').replace(/\.[^.]+$/, '');
let hasData = !!data;
let basePath = '';
let defaultAspect = '';
let formats: string[] = [];
let aspectClass = '';
let objectFitClass = `object-${objectFit}`;
let srcSetList = '';
let sizesAttr = '';
let fallbackSrc = '';
let imageMaxUrl = '';
let preloadWidths: number[] = [];
let primaryFormat = 'jpeg';

if (hasData) {
  basePath = `/${folderPath}${data.path}`;
  defaultAspect = data.aspect;


  const formatPriority: Record<ImageFormat, number> = { webp: 1, avif: 2, png: 3, jpeg: 4, jpg: 4 };

  const formats: ImageFormat[] = [...data.format].sort(
    (a: keyof typeof formatPriority, b: keyof typeof formatPriority) =>
      (formatPriority[a] ?? 99) - (formatPriority[b] ?? 99)
  );

  const availableWidths: number[] = data.variants.map(Number).sort((a: number, b: number) => a - b);


  const wMobile = availableWidths.find((w: number) => w >= variants.mobile) ?? availableWidths[0];
  const wTablet = variants.tablet ? availableWidths.find((w: number) => w >= Number(variants.tablet)) : undefined;
  const wDesktop = availableWidths.find((w: number) => w >= variants.desktop) ?? wTablet ?? wMobile;
  const wFull = availableWidths.find((w: number) => w >= variants.full) ?? wDesktop;
  const wFeatured = availableWidths.find((w: number) => w >= variants.featured) ?? wFull;
  const wThumb = availableWidths.find((w: number) => w >= variants.thumbnail) ?? availableWidths[0];

  let primaryFormat: ImageFormat = formats[0];

  const buildSrc = (w: number, fmt: string) => `${basePath}${imageBaseName}-w${w}-a${defaultAspect}.${fmt}`;

  // --- Responsive sources
  switch (variant) {
    case 'thumbnail':
      fallbackSrc = buildSrc(wThumb, primaryFormat);
      imageMaxUrl = toAbsoluteUrl(fallbackSrc);
      srcSetList = `${buildSrc(wThumb, primaryFormat)} ${wThumb}w, ${buildSrc(wTablet ?? wDesktop, primaryFormat)} ${(wTablet ?? wDesktop)}w`;
      sizesAttr = `(max-width: ${breakpoints.mobileMax}px) ${wThumb}px, ${(wTablet ?? wDesktop)}px`;
      preloadWidths = [wThumb];
      break;

    case 'mobile':
    case 'desktop':
    case 'featured':
    case 'auto':
    default:
      fallbackSrc = buildSrc(wMobile, primaryFormat);
      imageMaxUrl = toAbsoluteUrl(buildSrc(wFull, primaryFormat));
      const seenWidths = new Set<number>();
      srcSetList = [wMobile, wTablet, wDesktop, wFull]
        .filter((w): w is number => {
          if (typeof w !== 'number' || seenWidths.has(w)) return false;
          seenWidths.add(w);
          return true;
        })
        .map((w) => `${buildSrc(w, primaryFormat)} ${w}w`)
        .join(', ');

      // --- Responsive sizes
      const sizesList: string[] = [];

      if (wMobile) {
        sizesList.push(`(max-width: ${breakpoints.mobileMax}px) ${wMobile}px`);
      }

      if (wTablet) {
        sizesList.push(`(max-width: ${breakpoints.tabletMax}px) ${wTablet}px`);
      }

      if (wDesktop) {
        sizesList.push(`(max-width: ${breakpoints.fullMin - 1}px) ${wDesktop}px`);
      }

      sizesList.push(`${wFull}vw`);
      sizesAttr = sizesList.join(', ');

      preloadWidths = [wMobile, wFull, wTablet ?? wDesktop];
      break;
  }

  // Deduplicate preload widths
  const seen = new Set<number>();
  const finalPreloadWidths = preloadWidths.filter(w => !seen.has(w) && seen.add(w));

  // Preload logic (always includes mobile and full)
  if (loading === 'eager' || loading === 'delay') {
    const priority = loading === 'eager' ? 'high' : 'low';
    for (const w of finalPreloadWidths) {
      let media: string | undefined;
      if (w === wMobile) {
        media = `(max-width: ${breakpoints.mobileMax}px)`;
      } else if (w === wFull) {
        media = `(min-width: ${breakpoints.fullMin}px)`;
      } else {
        const minW = breakpoints.mobileMax + 1;
        const maxW = breakpoints.fullMin - 1;
        media = `(min-width: ${minW}px) and (max-width: ${maxW}px)`;
      }
      registerPreloadImage({ src: buildSrc(w, primaryFormat), media, fetchPriority: priority });
    }
  }

  if (addSchema) {
    registerSchemaImage(imageMaxUrl);
  }

  aspectClass = `a-${defaultAspect}`;
}
---
{addSchema && hasData && (
  <script is:inline type="application/ld+json" set:html={JSON.stringify({
    '@context': 'https://schema.org',
    '@type': 'ImageObject',
    '@id': imageMaxUrl,
    contentUrl: imageMaxUrl,
    url: imageMaxUrl,
    caption: caption || title || alt,
    description: alt,
    representativeOfPage: true,
    width: width ?? 640,
    height: height ?? Math.round((640 * Number(defaultAspect.split('x')[1])) / Number(defaultAspect.split('x')[0])),
  })} />
)}

{!hasData ? (
  <div class={`flex ai-center jc-center bg-primary-lighter ${aspectClass} ${loading === 'delay' ? 'opacity-02 transition-opacity duration-300' : ''} h-fit ${className}`}>
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 225" class={`w-full h-auto ${imageClassName} ${objectFitClass}`}>
      <rect width="400" height="225" fill="#00000000"></rect>
    </svg>
    <span class="absolute bold text-base">{siteDefaults.siteName}</span>
  </div>
) : (
  caption ? (
    <figure id={id} class={`block image-wrapper w-full ${aspectClass} h-fit ${className}`}>
      <picture>
        {formats.map(fmt => (
          <source
            type={`image/${fmt === 'jpg' ? 'jpeg' : fmt}`}
            {...(loading === 'delay'
              ? { 'data-srcset': srcSetList.replaceAll(`.${primaryFormat}`, `.${fmt}`), 'delay-image': true }
              : { srcset: srcSetList.replaceAll(`.${primaryFormat}`, `.${fmt}`) })}
            sizes={sizesAttr}
          />
        ))}
        <img
          {...(loading === 'delay'
            ? { 'data-src': fallbackSrc, 'data-srcset': srcSetList, 'delay-image': true }
            : { src: fallbackSrc, srcset: srcSetList })}
          sizes={sizesAttr}
          width={width}
          height={height}
          alt={alt}
          title={title}
          loading={loading === 'delay' ? 'lazy' : loading}
          decoding="async"
          fetchpriority={loading === 'eager' ? 'high' : loading === 'delay' ? 'low' : undefined}
          class={`block w-full h-auto br ${imageClassName} ${objectFitClass} ${loading === 'delay' ? 'opacity-0 transition-opacity duration-300' : ''}`}
        />
      </picture>
      <figcaption class="text-s">{caption}</figcaption>
    </figure>
  ) : (
    <figure id={id} class={`block image-wrapper w-full ${aspectClass} h-fit ${className}`}>
      <picture>
        {formats.map(fmt => (
          <source
            type={`image/${fmt === 'jpg' ? 'jpeg' : fmt}`}
            {...(loading === 'delay'
              ? { 'data-srcset': srcSetList.replaceAll(`.${primaryFormat}`, `.${fmt}`), 'delay-image': true }
              : { srcset: srcSetList.replaceAll(`.${primaryFormat}`, `.${fmt}`) })}
            sizes={sizesAttr}
          />
        ))}
        <img
          {...(loading === 'delay'
            ? { 'data-src': fallbackSrc, 'data-srcset': srcSetList, 'delay-image': true }
            : { src: fallbackSrc, srcset: srcSetList })}
          sizes={sizesAttr}
          width={width}
          height={height}
          alt={alt}
          title={title}
          loading={loading === 'delay' ? 'lazy' : loading}
          decoding="async"
          fetchpriority={loading === 'eager' ? 'high' : loading === 'delay' ? 'low' : undefined}
          class={`block w-full h-auto br ${imageClassName} ${objectFitClass} ${loading === 'delay' ? 'opacity-0 transition-opacity duration-300' : ''}`}
        />
      </picture>
    </figure>
  )
)}

