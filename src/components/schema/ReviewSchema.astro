---
// src/components/schema/ReviewSchema.astro
import type { Review, ReviewType } from "@/utils/reviews";
import { toAbsoluteUrl } from "@/utils/urls";

const {
  contextType = "Organization",
  item,
  aggregate,
  reviews = [],
  maxReviews = 0
} = Astro.props as {
  contextType?: "Organization" | "Service" | "Product";
  item: { name: string; url: string };
  aggregate?: { ratingValue: number; reviewCount: number };
  reviews?: Review[];
  maxReviews?: number;
};

const filtered = reviews.filter(r => (r.target?.type as ReviewType) === contextType);
const sample = maxReviews > 0 ? filtered.slice(0, maxReviews) : [];

const jsonLd: any = {
  "@context": "https://schema.org",
  "@type": contextType,
  "name": item.name,
  "url": toAbsoluteUrl(item.url, { cdn: 'never' }),
  ...(aggregate && {
    "aggregateRating": {
      "@type": "AggregateRating",
      "ratingValue": aggregate.ratingValue,
      "reviewCount": aggregate.reviewCount
    }
  }),
  ...(sample.length
    ? {
        "review": sample.map((r) => ({
          "@type": "Review",
          ...(r.url ? {
            "@id": toAbsoluteUrl(r.url, { cdn: 'never' }),
            "url": toAbsoluteUrl(r.url, { cdn: 'never' })
          } : {}),
          "name": r.headline,
          "reviewBody": r.body,
          "inLanguage": r.language || "en",
          "datePublished": r.datePublished,
          "reviewRating": {
            "@type": "Rating",
            "ratingValue": r.rating,
            "bestRating": 5,
            "worstRating": 1
          },
          "author": r.author?.name ? {
            "@type": r.author?.type || "Person",
            "name": r.author.name,
            ...(r.author?.profileUrl ? { "url": toAbsoluteUrl(r.author.profileUrl, { cdn: 'never' }) } : {}),
            ...(r.author?.avatar ? { "image": toAbsoluteUrl(r.author.avatar, { cdn: 'never' }) } : {}),
            ...(r.author?.designation ? { "jobTitle": r.author.designation } : {}),
            ...(r.author?.organization ? { "worksFor": { "@type": "Organization", "name": r.author.organization } } : {})
          } : undefined,
          "itemReviewed": {
            "@type": r?.target?.type || contextType,
            "name": r?.target?.name || item.name,
            "url": r?.target?.url
              ? toAbsoluteUrl(r.target.url, { cdn: 'never' })
              : toAbsoluteUrl(item.url, { cdn: 'never' })
          },
          ...(r.media?.length ? {
            "associatedMedia": r.media
              .filter(m => m.type === "image")
              .map(m => ({
                "@type": "ImageObject",
                "url": toAbsoluteUrl(m.url, { cdn: 'never' }),
                "width": m.width,
                "height": m.height,
                "caption": m.alt
              }))
          } : {}),
          ...(r.location?.city || r.location?.countryCode ? {
            "location": {
              "@type": "Place",
              "name": r.location?.name || r.location?.city,
              "address": {
                "@type": "PostalAddress",
                "addressLocality": r.location?.city,
                "addressCountry": r.location?.countryCode
              }
            }
          } : {})
        }))
      }
    : {})
};
---
<script id="review-schema" type="application/ld+json" set:html={JSON.stringify(jsonLd)}></script>
