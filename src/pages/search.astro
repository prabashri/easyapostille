---
// src/pages/search.astro
// export const prerender = true;

import BaseLayout from '../layouts/BaseLayout.astro';

const pageSeo = {
  title: 'Search Results | nViewsWEB Astro Theme',
  description: 'Find content in the website using the search functionality.',
  authors: [],
};


// Get query from URL
const url = new URL(Astro.request.url);
const query = url.searchParams.get('q')?.toLowerCase() ?? '';


---
<BaseLayout headProps={pageSeo} >
  <Fragment slot="headContent-top"></Fragment>  
  <Fragment slot="headContent-bottom"></Fragment>
      <h1 class="cc-h3">
        {query ? `Search Results for: "${query}"` : 'Search ...'}
      </h1>
            
      <style>
        .search-box { margin-bottom: 1rem; }
        .search-input {
          width: 100%;
          padding: 0.5rem;
          font-size: 1rem;
        }
        .search-results li {
          margin: 0.5rem 0;
          border-bottom: 1px solid #ddd;
          padding-bottom: 0.5rem;
        }
        mark {
        background-color: #ffeb3b;
        color: inherit;
        padding: 0 2px;
      }
      .search-results {
        list-style: none;
        padding: 0;
      }
      .search-results h3 {
        margin-top: 1rem;
        font-size: 1.1rem;
      }

      </style>

      <div id="search" class="search-box">
        <input
          type="search"
          id="search-input"
          class="search-input"
          placeholder="Search articles, pagesâ€¦"
          value=""
          autocomplete="off"
        />
        <ul id="search-results"></ul>
      </div>
      <!-- Load Fuse globally -->
<script is:inline src="/vendor/fuse.min.js"></script>
<script type="module">
  async function waitForFuse() {
    return new Promise((resolve) => {
      const check = () => {
        if (window.Fuse) resolve(window.Fuse);
        else requestAnimationFrame(check);
      };
      check();
    });
  }

  const input = document.getElementById('search-input');
  const resultsContainer = document.getElementById('search-results');
  const params = new URLSearchParams(window.location.search);
  const qParam = params.get('q') || '';

  let fuse;
  let data = [];
  let debounceTimer;

  async function loadData() {
    const Fuse = await waitForFuse();
    const res = await fetch('/search-index.json');
    data = await res.json();

    fuse = new Fuse(data, {
      keys: ['title', 'description', 'content', 'tags'],
      threshold: 0.3,
      ignoreLocation: true,
      includeMatches: true,
    });

    if (qParam) {
      input.value = qParam;
      search(qParam);
    }
  }

  function createHighlightedNode(text, indices = []) {
    const container = document.createDocumentFragment();
    let lastIndex = 0;

    indices?.forEach(([start, end]) => {
      if (start > lastIndex) {
        container.appendChild(document.createTextNode(text.slice(lastIndex, start)));
      }
      const mark = document.createElement('mark');
      mark.textContent = text.slice(start, end + 1);
      container.appendChild(mark);
      lastIndex = end + 1;
    });

    if (lastIndex < text.length) {
      container.appendChild(document.createTextNode(text.slice(lastIndex)));
    }

    return container;
  }

  function renderResults(results) {
    resultsContainer.innerHTML = '';
    if (!Array.isArray(results) || results.length === 0) return;

    const groups = {};
    for (const { item, matches } of results) {
      const group = item.collection || 'Other';
      if (!groups[group]) groups[group] = [];
      groups[group].push({ item, matches });
    }

    Object.entries(groups).forEach(([group, items]) => {
      const header = document.createElement('h3');
      header.textContent = group.charAt(0).toUpperCase() + group.slice(1);
      resultsContainer.appendChild(header);

      const ul = document.createElement('ul');
      items.slice(0, 20).forEach(({ item, matches }) => {
        const matchMap = Object.fromEntries(matches.map(m => [m.key, m]));

        const li = document.createElement('li');
        const link = document.createElement('a');
        link.href = item.url;
        link.style.fontWeight = 'bold';

        const titleMatch = matchMap.title?.indices;
        link.appendChild(createHighlightedNode(item.title, titleMatch));

        const desc = document.createElement('p');
        const descMatch = matchMap.description?.indices;
        desc.appendChild(createHighlightedNode(item.description || '', descMatch));

        li.appendChild(link);
        li.appendChild(desc);
        ul.appendChild(li);
      });

      resultsContainer.appendChild(ul);

      if (items.length > 20) {
        const btn = document.createElement('button');
        btn.textContent = `Load More (${items.length - 20} more)`;
        btn.onclick = () => {
          items.slice(20).forEach(({ item, matches }) => {
            const matchMap = Object.fromEntries(matches.map(m => [m.key, m]));

            const li = document.createElement('li');
            const link = document.createElement('a');
            link.href = item.url;
            link.style.fontWeight = 'bold';
            link.appendChild(createHighlightedNode(item.title, matchMap.title?.indices));

            const desc = document.createElement('p');
            desc.appendChild(createHighlightedNode(item.description || '', matchMap.description?.indices));

            li.appendChild(link);
            li.appendChild(desc);
            ul.appendChild(li);
          });
          btn.remove();
        };
        resultsContainer.appendChild(btn);
      }
    });
  }

  function search(query) {
    if (!fuse || query.length < 2) {
      resultsContainer.innerHTML = '';
      return;
    }
    const results = fuse.search(query);
    renderResults(results);
  }

  input?.addEventListener('input', (e) => {
    const query = e.target.value.trim();
    clearTimeout(debounceTimer);
    debounceTimer = setTimeout(() => {
      search(query);
      const newURL = new URL(window.location.href);
      if (query) {
        newURL.searchParams.set('q', query);
      } else {
        newURL.searchParams.delete('q');
      }
      window.history.replaceState({}, '', newURL.toString());
    }, 300);
  });

  loadData();
</script>


  <Fragment slot="extraScripts"></Fragment>
</BaseLayout>