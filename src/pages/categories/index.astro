---
// src/pages/categories/index.astro
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { siteDefaults } from '../../config/siteDefaults';
import type { HeadProps } from '../../types/HeadProps';
import { categoryMeta } from '../../config/categoryMeta'; // Optional: create this like tagMeta

import { collectFieldCounts } from "../../utils/collectFieldCounts";

// Types
type CategoryMetaItem = {
  name: string;
  title?: string;
  description?: string;
  image?: string;
  url?: string;
};
type CategoryWithCount = CategoryMetaItem & { count: number };

// Map categoryMeta for quick lookup
const categoryMetaMap = new Map<string, CategoryMetaItem>(
  Object.entries(categoryMeta ?? {}).map(([name, meta]) => [
    name.toLowerCase(),
    { name, ...meta }
  ])
);

// Get category counts (first 3 categories max per post)
const categoryCountsArray = await collectFieldCounts("categories", 3);

// Known vs unknown
const knownCategories: CategoryWithCount[] = [];
const unknownCategories: CategoryWithCount[] = [];

// Helper to format titles
function formatTitle(cat: string): string {
  return cat
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

// Separate into known and unknown lists
for (const { name, count } of categoryCountsArray) {
  const catEntry = categoryMetaMap.get(name);
  if (catEntry) {
    knownCategories.push({ ...catEntry, count });
  } else {
    unknownCategories.push({
      name,
      title: formatTitle(name),
      description: `Posts related to ${formatTitle(name)}.`,
      image: `/categories/default-image.png`,
      url: `/categories/${name}/`,
      count
    });
  }
}

// SEO Head props
const headProps: HeadProps = {
  title: `All Categories | ${siteDefaults.siteName}`,
  description: `Browse all categories for tools, guides, and blog posts on ${siteDefaults.siteName}.`,
  image: siteDefaults.image,
  canonicalUrl: `${siteDefaults.siteUrl}/categories/`,
  index: true,
  keywords: [...knownCategories.map(c => c.name), ...unknownCategories.map(c => c.name)],
  type: 'collection',
  url: `${siteDefaults.siteUrl}/categories/`,
  authors: [],
  authorName: siteDefaults.authorName,
  authorUrl: siteDefaults.authorUrl,
};
---

<BaseLayout headProps={headProps}>
  <h1>All Categories</h1>

  <!-- Primary Categories -->
  {knownCategories.length > 0 && (
    <section class="mb-4">
      <h2 class="text-xl font-bold mb-2">ðŸ“‚ Primary Categories</h2>
      <ul class="grid gap-4 md:grid-cols-2">
        {knownCategories.map(cat => (
          <li class="border p-4 rounded bg-white shadow-sm">
            <a href={cat.url ?? `/categories/${cat.name}/`} class="block no-bb">
              {cat.image && (
                <img src={cat.image} alt={cat.title} class="mb-2 h-32 w-full object-cover rounded" />
              )}
              <h3 class="text-lg font-semibold mb-1">{cat.title}</h3>
              <p class="text-sm text-gray-600">{cat.description}</p>
              <span class="inline-block mt-2 text-xs text-gray-500">{cat.count} posts</span>
            </a>
          </li>
        ))}
      </ul>
    </section>
  )}

  <!-- Other Categories -->
  {unknownCategories.length > 0 && (
    <section>
      <h2 class="text-xl font-bold mb-2">ðŸ—‚ Other Categories</h2>
      <ul class="grid gap-4 md:grid-cols-2 no-bullets">
        {unknownCategories.map(cat => (
          <li class="border p-4 rounded bg-white shadow-sm">
            <a href={cat.url} class="block no-bb">
              {cat.image && (
                <img src={cat.image} alt={cat.title} class="mb-2 h-32 w-full object-cover rounded" />
              )}
              <h3 class="text-lg font-semibold mb-1">{cat.title}</h3>
              <p class="text-sm text-gray-600">{cat.description}</p>
              <span class="inline-block mt-2 text-xs text-gray-500">{cat.count} posts</span>
            </a>
          </li>
        ))}
      </ul>
    </section>
  )}

  <Fragment slot="extraScripts" />
</BaseLayout>
