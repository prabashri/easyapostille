---
// src/pages/categories/[category]/[page].astro
import BaseLayout from '../../../layouts/BaseLayout.astro';
import PaginationSeo from '../../../components/PaginationSeo.astro';
import PaginationRedirect from '../../../components/PaginationRedirect.astro';
import Pagination from '../../../components/Pagination.astro';
import { getCollection } from 'astro:content';
import { siteDefaults } from '../../../config/siteDefaults';
import { paginate } from '../../../utils/paginate';
import type { HeadProps } from '../../../types/HeadProps';
import { categoryMeta } from '../../../config/categoryMeta';
import modifiedDatesJson from '../../../data/modified-dates.json';
import { getCollectionUrl } from '../../../utils/getCollectionUrl';

const category = Astro.params.category?.toLowerCase() ?? 'unknown';
const currentPage = Number(Astro.params.page ?? '1');
const POSTS_PER_PAGE = siteDefaults.postsPerCollectionsPage ?? 10;

const modifiedDates = modifiedDatesJson as Record<string, string>;

function getModifiedDateKey(entry: any) {
  const slugKey = `${entry.collection}/${entry.slug ?? entry.id}`;
  return modifiedDates[slugKey] ?? entry.data.lastModified ?? entry.data.publishedDate ?? entry.data.date;
}

// Build category meta map
const categoryMetaMap = new Map<string, { name: string; title?: string; description?: string; image?: string; url?: string }>(
  Object.entries(categoryMeta).map(([name, meta]) => [name.toLowerCase(), { name, ...meta }])
);

function hasCategory(post: any, category: string): boolean {
  return Array.isArray(post.data?.categories) && post.data.categories.some((c: string) => c.toLowerCase() === category.toLowerCase());
}

// Gather category-matching entries
const categoryCollections = Object.entries(siteDefaults.collections)
  .filter(([_, config]) => config?.categories === true)
  .map(([key]) => key as keyof typeof siteDefaults.collections);

const matchedEntries = [];
for (const coll of categoryCollections) {
  const posts = await getCollection(coll);
  matchedEntries.push(...posts.filter(entry => hasCategory(entry, category)));
}

// Sort entries by modified date
const sortedEntries = matchedEntries.sort((a, b) => {
  const dateB = new Date(getModifiedDateKey(b)).getTime();
  const dateA = new Date(getModifiedDateKey(a)).getTime();
  return dateB - dateA; // Descending
});

const { pageItems: paginatedEntries, totalPages } = paginate(sortedEntries, currentPage, POSTS_PER_PAGE);

// Category meta or default
const isKnownCategory = categoryMetaMap.has(category);
const meta = categoryMetaMap.get(category) ?? {
  name: category,
  title: category.charAt(0).toUpperCase() + category.slice(1),
  description: `Explore posts in category "${category}" on ${siteDefaults.siteName}.`,
  image: `/categories/default-image.png`,
  url: `/categories/${category}/`
};
const baseUrl = `/categories/${category}`;

// Preload images â€” only pass src
const preloadImages = paginatedEntries
  .filter(p => "heroImage" in p.data && typeof p.data.heroImage === 'string')
  .slice(0, 3)
  .map(p => "heroImage" in p.data ? p.data.heroImage : '')
  .filter((src): src is string => typeof src === 'string' && !!src);

// SEO props
const pageSeo: HeadProps = {
  title: `${meta.title} | ${siteDefaults.siteName}`,
  description: meta.description,
  image: meta.image || siteDefaults.image,
  preloadImages,
  breadcrumb: [
    { name: 'Home', url: '/' },
    { name: 'Categories', url: '/categories/' },
    { name: meta.title ?? category, url: `${baseUrl}/` },
  ],
  listItems: paginatedEntries.map(p => ({
    name: "title" in p.data ? p.data.title : 'Untitled',
    url: getCollectionUrl(p.collection, "slug" in p.data && typeof p.data.slug === "string" ? p.data.slug : String(p.id))
  })),
  type: 'collection',
  index: paginatedEntries.length > 0,
  authors: [
    {
      id: 'category',
      slug: category,
      url: baseUrl,
      name: meta.title ?? category,
      data: { name: meta.title ?? category, description: meta.description }
    }
  ],
};
---

<BaseLayout headProps={pageSeo}>
  <PaginationRedirect basePath={baseUrl} currentPage={currentPage} />
  <PaginationSeo basePath={baseUrl} currentPage={currentPage} totalPages={totalPages} />

  <header class="mx-w-featured mi-auto ta-center">
    <h1>{pageSeo.title}</h1>
    <p>{pageSeo.description}</p>
  </header>

  {paginatedEntries.length === 0 ? (
    <p class="col-base-80 ta-center mb-2">No posts found in this category.</p>
  ) : (
    <div class="mx-w-site mi-auto flex wrap pc-center gap mb-2">
      {paginatedEntries.map(item => (
        <a href={getCollectionUrl(item.collection, typeof item.data.slug === "string" ? item.data.slug : String(item.id))} class="block mx-w-320">
          <img
            src={"heroImage" in item.data ? item.data.heroImage : siteDefaults.image}
            alt={"heroImageAlt" in item.data ? item.data.heroImageAlt : "title" in item.data ? item.data.title : 'Post image'}
            width="320"
            height="180"
            class="aspect-16x9 full-width br"
            loading="lazy"
          />
          <div class="p-4">
            <span class="inline-block text-xs text-white bg-blue-600 px-2 py-1 rounded mb-2 uppercase tracking-wide">
              {item.collection}
            </span>
            <h2 class="cg-base no-margin">{ "title" in item.data ? item.data.title : 'Untitled'}</h2>
            <p class="text-sm text-gray-600">{ "description" in item.data ? item.data.description : 'No description available.'}</p>
          </div>
        </a>
      ))}
    </div>
  )}

  <Pagination currentPage={currentPage} totalPages={totalPages} basePath={baseUrl} />

  {!isKnownCategory && (
    <section class="mx-w-840 mi-auto mt-8">
      <h2 class="text-xl font-semibold mb-4">Popular Categories</h2>
      <ul class="flex flex-wrap gap-3 text-sm">
        {Object.entries(categoryMeta).map(([slug, meta]) => (
          <li>
            <a
              href={`/categories/${slug.toLowerCase()}`}
              class="inline-block px-3 py-1 rounded bg-gray-100 hover:bg-gray-200 border"
              title={meta.description}
            >
              {meta.title ?? slug}
            </a>
          </li>
        ))}
      </ul>
    </section>
  )}
</BaseLayout>
