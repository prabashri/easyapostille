---
// src/pages/tags/index.astro
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { siteDefaults } from '../../config/siteDefaults';
import type { HeadProps } from '../../types/HeadProps';
import { tagMeta } from '../../config/tagMeta';
import ResponsiveImage from '../../components/ResponsiveImage.astro';

import { collectFieldCounts } from "../../utils/collectFieldCounts";

// Type definitions
type TagMetaItem = {
  name: string;
  title?: string;
  description?: string;
  image?: string;
  url?: string;
};
type TagWithCount = TagMetaItem & { count: number };

// Map tagMeta for quick lookup
const tagMetaMap = new Map<string, TagMetaItem>(
  Object.entries(tagMeta).map(([name, meta]) => [
    name.toLowerCase(),
    { name, ...meta }
  ])
);

const entry = "tags";

// Get tag counts (first 3 per post max)
const tagCountsArray = await collectFieldCounts(entry, 3);

// Known vs unknown arrays
const knownTags: TagWithCount[] = [];
const unknownTags: TagWithCount[] = [];

// Helper to format unknown tag titles
function formatTitle(tag: string): string {
  return tag
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

// Loop tagCountsArray directly
for (const { name, count } of tagCountsArray) {
  const tagEntry = tagMetaMap.get(name);
  if (tagEntry) {
    knownTags.push({ ...tagEntry, count });
  } else {
    unknownTags.push({
      name,
      title: formatTitle(name),
      description: `Posts related to ${formatTitle(name)}.`,
      image: `/${entry}/default-image.png`,
      url: `/${entry}/${name}/`,
      count
    });
  }
}


// SEO setup
const headProps: HeadProps = {
  title: `All | ${siteDefaults.siteName}`,
  description: `Explore all tags used across tools, guides, and blog posts on ${siteDefaults.siteName}.`,
  image: siteDefaults.image,
  canonicalUrl: `${siteDefaults.siteUrl}/${entry}/`,
  index: true,
  keywords: [...knownTags.map(t => t.name), ...unknownTags.map(t => t.name)],
  type: 'collection',
  url: `${siteDefaults.siteUrl}/${entry}/`,
  authors: [],
  authorName: siteDefaults.authorName,
  authorUrl: siteDefaults.authorUrl,
};
---

<BaseLayout headProps={headProps}>
  <div id="collections-header" class="mx-w-site mi-auto ta-center">
    <h1>{siteDefaults.fieldCollections[entry].title}</h1>
    <p>{siteDefaults.fieldCollections[entry].description}</p>
  </div>
  
  <!-- Primary Tags -->
  {knownTags.length > 0 && (
    <section class="mx-w-site mi-auto mb-2">
      <h2 class="text-xl bold mb-2">{`Primary ${siteDefaults.fieldCollections[entry].title}`}</h2>
      <ul class="flex wrap gap-2 no-bullets">
        {knownTags.map((tag, index) => (
          <li class="w-320 border p-1 br bg-base-00 box-shadow">
            <a href={tag.url ?? `/${entry}/${tag.name}/`} class="block td-none">
              {tag.image && (
                <ResponsiveImage
                  src={tag.image}
                  alt={tag.title ?? tag.name}
                  sizes="320px"
                  width={320}
                  height={180}
                  breakpoints={{ mobile: 320, desktop: 320 }}
                  loading={index < 3 ? 'eager' : 'lazy'}
                />
              )}
              <div class="p-02">
                <h3 class="text-base bold mt-1">{tag.title}</h3>
                <p class="text-s col-base-80">{tag.description}</p>
                <span class="inline-block mt-1 text-xs col-base-80">
                  {tag.count} posts to explore
                </span>
              </div>              
            </a>
          </li>
        ))}
      </ul>
    </section>
  )}

  <!-- Other Tags -->
  {unknownTags.length > 0 && (
    <section>
      <h2 class="text-xl font-bold mb-2">{`Other ${siteDefaults.fieldCollections[entry].title}`}</h2>
      <ul class="flex wrap gap-2 no-bullets">
        {unknownTags.map(tag => (
          <li class="mx-w-320 w-full border p-1 br bg-base-00 box-shadow">
            <a href={tag.url} class="block no-bb">
              {tag.image && (
                <ResponsiveImage
                  src={tag.image}
                  alt={tag.title ?? tag.name}
                  sizes="320px"
                  width={320}
                  height={180}
                  breakpoints={{ mobile: 320, desktop: 320 }}
                />
              )}
              <div class="p-02">
                <h3 class="text-base bold mt-1">{tag.title}</h3>
                <p class="text-s col-base-80">{tag.description}</p>
                <span class="inline-block mt-1 text-xs col-base-80">
                  {tag.count} posts to explore
                </span>
              </div>
            </a>
          </li>
        ))}
      </ul>
    </section>
  )}

  <Fragment slot="extraScripts" />
</BaseLayout>
