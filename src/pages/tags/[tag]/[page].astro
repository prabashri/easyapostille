---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import PaginationSeo from '../../../components/PaginationSeo.astro';
import PaginationRedirect from '../../../components/PaginationRedirect.astro';
import Pagination from '../../../components/Pagination.astro';
import { getCollection } from 'astro:content';
import { siteDefaults } from '../../../config/siteDefaults';
import { paginate } from '../../../utils/paginate';
import type { HeadProps } from '../../../types/HeadProps';
import { tagMeta } from '../../../config/tagMeta';
import modifiedDatesJson from '../../../data/modified-dates.json';
import { getCollectionUrl } from '../../../utils/getCollectionUrl';

const tag = Astro.params.tag?.toLowerCase() ?? 'unknown';
const currentPage = Number(Astro.params.page ?? '1');
const POSTS_PER_PAGE = siteDefaults.postsPerCollectionsPage ?? 10;

// Modified dates mapping
const modifiedDates = modifiedDatesJson as Record<string, string>;

function getModifiedDateKey(entry: any) {
  const key = `${entry.collection}/${entry.slug ?? entry.id}`;
  return modifiedDates[key] ?? entry.data.lastModified ?? entry.data.publishedDate ?? entry.data.date;
}

// Build tag meta map
const tagMetaMap = new Map<string, { name: string; title?: string; description?: string; image?: string; url?: string }>(
  Object.entries(tagMeta).map(([name, meta]) => [name.toLowerCase(), { name, ...meta }])
);

function hasTag(post: any, tag: string): boolean {
  return Array.isArray(post.data?.tags) &&
    post.data.tags.some((t: string) => t.toLowerCase() === tag.toLowerCase());
}

// Gather tagged entries from collections
const taggedCollections = Object.entries(siteDefaults.collections)
  .filter(([_, config]) => config?.tags === true)
  .map(([key]) => key as keyof typeof siteDefaults.collections);

let matchedEntries: any[] = [];
for (const coll of taggedCollections) {
  const posts = await getCollection(coll);
  matchedEntries.push(...posts.filter(entry => hasTag(entry, tag)));
}

// Sort entries by modified date
const sortedEntries = matchedEntries.sort((a, b) => {
  const dateB = new Date(getModifiedDateKey(b)).getTime();
  const dateA = new Date(getModifiedDateKey(a)).getTime();
  return dateB - dateA;
});

const { pageItems: paginatedEntries, totalPages } = paginate(sortedEntries, currentPage, POSTS_PER_PAGE);

// Tag meta or fallback
const isKnownTag = tagMetaMap.has(tag);
const meta = tagMetaMap.get(tag) ?? {
  name: tag,
  title: tag.charAt(0).toUpperCase() + tag.slice(1),
  description: `Explore posts tagged "${tag}" on ${siteDefaults.siteName}.`,
  image: `/tags/default-image.png`,
  url: `/tags/${tag}/`
};
const baseUrl = `/tags/${tag}`;

// SEO props
const pageSeo: HeadProps = {
  title: `${meta.title} | ${siteDefaults.siteName}`,
  description: meta.description,
  image: meta.image || siteDefaults.image,
  breadcrumb: [
    { name: 'Home', url: '/' },
    { name: 'Tags', url: '/tags/' },
    { name: meta.title ?? tag, url: `${baseUrl}/` },
  ],
  listItems: paginatedEntries.map(p => ({
    name: "title" in p.data ? p.data.title : 'Untitled',
    url: getCollectionUrl(p.collection, "slug" in p.data && typeof p.data.slug === "string" ? p.data.slug : String(p.id)) // âœ… Use helper
  })),
  type: 'collection',
  index: paginatedEntries.length > 0,
  authors: [
    {
      id: 'tag',
      slug: tag,
      url: baseUrl,
      name: meta.title ?? tag,
      data: { name: meta.title ?? tag, description: meta.description }
    }
  ],
};
---

<BaseLayout headProps={pageSeo}>
  <PaginationRedirect basePath={baseUrl} currentPage={currentPage} />
  <PaginationSeo basePath={baseUrl} currentPage={currentPage} totalPages={totalPages} />

  <header class="mx-w-featured mi-auto ta-center">
    <h1>{pageSeo.title}</h1>
    <p>{pageSeo.description}</p>
  </header>

  {paginatedEntries.length === 0 ? (
    <p class="col-base-80 ta-center mb-2">No posts found for this tag.</p>
  ) : (
    <div class="mx-w-site mi-auto flex wrap pc-center gap mb-2">
      {paginatedEntries.map(item => (
        <a href={getCollectionUrl(item.collection, typeof item.data.slug === "string" ? item.data.slug : String(item.id))} class="block mx-w-320 full-width no-bb">
          <img
            src={"heroImage" in item.data ? item.data.heroImage : siteDefaults.image}
            alt={"heroImageAlt" in item.data ? item.data.heroImageAlt : "title" in item.data ? item.data.title : 'Post image'}
            width="320"
            height="180"
            class="aspect-16x9 full-width br"
            loading="lazy"
          />
          <div class="p-4">
            <span class="inline-block text-xs text-white bg-blue-600 px-2 py-1 rounded mb-2 uppercase tracking-wide">
              {item.collection}
            </span>
            <h2 class="cg-base no-margin">{ "title" in item.data ? item.data.title : 'Untitled'}</h2>
            <p class="text-sm text-gray-600">{ "description" in item.data ? item.data.description : 'No description available.'}</p>
          </div>
        </a>
      ))}
    </div>
  )}

  <Pagination currentPage={currentPage} totalPages={totalPages} basePath={baseUrl} />

  {!isKnownTag && (
    <section class="mx-w-840 mi-auto mt-8">
      <h2 class="text-xl font-semibold mb-4">Popular Tags</h2>
      <ul class="flex flex-wrap gap-3 text-sm">
        {Object.entries(tagMeta).map(([slug, meta]) => (
          <li>
            <a
              href={`/tags/${slug.toLowerCase()}`}
              class="inline-block px-3 py-1 rounded bg-gray-100 hover:bg-gray-200 border"
              title={meta.description}
            >
              {meta.title ?? slug}
            </a>
          </li>
        ))}
      </ul>
    </section>
  )}
</BaseLayout>
