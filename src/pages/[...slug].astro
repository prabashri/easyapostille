---
// src/pages/[slug].astro
// to handle dynamic slugs for posts without explicit paths

import { getEntry, render } from 'astro:content';
import PostLayout from '../layouts/PostLayout.astro';
import { siteDefaults } from '../config/siteDefaults';
import modifiedDatesJson from '../data/modified-dates.json';
const modifiedDates = modifiedDatesJson as Record<string, string>;

const { slug } = Astro.params as { slug: string };

// ❌ Invalid slug param — show 404
if (!slug || typeof slug !== 'string') {
  throw Astro.redirect('/404');
}

// ✅ Get post entry from 'post' collection
let post;
try {
  post = await getEntry('post', slug);
} catch {
  throw Astro.redirect('/404');
}

if (!post) {
  throw Astro.redirect('/404');
}

// ✅ Render the Markdown/MDX content
const { Content, headings } = await render(post);

// ✅ Table of Contents from h2 headings
const toc = headings
  .filter((h) => h.depth === 2)
  .map((h) => ({
    id: h.slug,
    text: h.text,
    level: h.depth,
  }));

// ✅ Last modified from JSON fallback
const relativeKey = `${post.collection}/${post.data.slug}`;

const lastModifiedRaw = modifiedDates[relativeKey] || post.data.publishedDate;

const lastModifiedFormatted = lastModifiedRaw
  ? new Date(lastModifiedRaw).toLocaleDateString('en-US', {
      month: 'long',
      day: 'numeric',
      year: 'numeric',
    })
  : null;

// ✅ Canonical URL
const canonicalUrl =
  post.data.canonicalUrl ||
  `${siteDefaults.siteUrl}/post/${slug}/`;
---

<PostLayout
  {...post.data}
  toc={toc}
  slug={slug}
  canonicalUrl={canonicalUrl}
  lastModified={lastModifiedFormatted}
>
  <Content />
</PostLayout>
