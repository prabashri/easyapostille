---
// src/pages/team/[...slug].astro
import { getEntry, getCollection, render } from 'astro:content';
import TeamLayout from '../../layouts/TeamLayout.astro';
import { siteDefaults } from '../../config/siteDefaults';
import type { DataEntryMap } from 'astro:content';
import LoadMorePosts from '../../components/LoadMorePosts.astro';
import Card from '../../components/ui/Card.astro';
import type { CardProps } from '../../types/CardProps';


const { slug } = Astro.params;
const slugId = Array.isArray(slug) ? slug.join('/') : slug;

if (!slugId || slugId === '_team-member' || slugId === '_team') {
  throw Astro.redirect('/404/');
}

const post = await getEntry('team', slugId);
if (!post) throw Astro.redirect('/404/');

const { Content } = await render(post);

// Get collections with authors
const collectionsWithAuthors = Object.entries(siteDefaults.collections)
  .filter(([_, config]) => typeof config === 'object' && 'authors' in config && config.authors === true)
  .map(([key]) => key);

  // 2. Collect authored posts across all matching collections
  const authoredPosts: {
    title: string;
    description: string;
    slug: string;
    collection: string;
    collectionBase: string;
    heroImage?: string | null;
    heroImageAlt?: string;
    lastModified?: string;
    draft?: boolean;
  }[] = [];

  

  for (const coll of collectionsWithAuthors) {
    // 👇 Ensure proper typing with keyof DataEntryMap
    const posts = await getCollection(coll as keyof DataEntryMap); 

    for (const entry of posts) {
        // 🔁 Skip draft posts
      if ('draft' in entry.data && entry.data.draft === true) {
        continue;
      }

      // 🔁 Skip file names starting with `_` (e.g., _post.md)
      if (entry.data.slug?.startsWith('_')) {
        continue;
      }
      const authors = 'authors' in entry.data ? entry.data.authors : undefined;

      const collectionConfig = siteDefaults.collections[entry.collection as keyof typeof siteDefaults.collections];
      const base = collectionConfig?.base?.replace(/^\/|\/$/g, '') || '';
      const collectionBase = base ? `${base}/` : '';


      const isMatch =
        Array.isArray(authors) &&
        authors.some((author) => typeof author === 'object' && author?.id === slugId);

      if (isMatch && 'title' in entry.data && 'description' in entry.data) {
        
        authoredPosts.push({
          title: entry.data.title ?? 'Untitled',
          description: entry.data.description ?? '',
          slug: entry.data.slug ?? '',
          collection: entry.collection,
          collectionBase,
          heroImage: entry.data.heroImage ?? null,
          heroImageAlt: entry.data.heroImageAlt ?? '',
          lastModified: "lastModified" in entry.data ? entry.data.lastModified : entry.data.publishedDate ?? '',
        });
      }
    }
  }
const postDisplay = 6;
// limit authored posts to 3 for initial load
const initialPosts = authoredPosts.slice(0, postDisplay);
const hasMore = authoredPosts.length > postDisplay;
// Team props
const {
  name,
  prefix = '',
  role,
  highestDegree = '',
  shortBio = '',
  experience,
  expertise = [],
  awards = [],
  affiliation = '',
  addressing = '',
  email,
  website = '',
  color = 'hsl(220, 60%, 70%)',
  joined = '',
  left = '',
  useGravatar = false,
  gravatarEmail = '',
  useImage = false,
  useInitial = false,
  initialText = '',
  image = '',
  social = {} as Record<string, string>,
  featured = false,
} = post.data;

const teamProps = {
  name,
  prefix,
  role,
  highestDegree,
  shortBio,
  experience,
  expertise,
  awards,
  affiliation,
  addressing,
  email,
  website,
  color,
  joined,
  left,
  useGravatar,
  gravatarEmail,
  useImage,
  useInitial,
  initialText,
  photo: image,
  social,
  featured,
  slug: post.data.slug ?? slugId,
  id: slugId,
};

const authorCards: CardProps[] = initialPosts.map((p) => ({
  link: `/${p.collectionBase}${p.slug}/`,
  linkAriaLabel: `Read post: ${p.title}`,

  image: p.heroImage || undefined,
  imageAlt: p.heroImageAlt || p.title,

  title: p.title,
  description: p.description,

  date: p.lastModified
    ? new Date(p.lastModified).toLocaleDateString()
    : undefined,

  orientation: 'vertical',
  imageSize: 320,
  roleType: 'article',
  loading: 'lazy',

  className: 'w-full mn-w-320',
  imageClassName: '',

  otherEntries: []
}));

---

<TeamLayout {...teamProps}>
  <Content />
  <!-- Posts go in a named slot -->
  <Fragment slot="posts">
    {authorCards.length > 0 && (
      <section id="author-posts-section" class="mx-w-site w-full mi-auto mb-1 pb-1">
        <h2 class="text-xl bold">Posts by {name}</h2>

        <div id="author-posts" class="flex mx-w-site w-full wrap gap mb-1 ai-center jc-center">
          {authorCards.map((card) => (
            <Card {...card} />
          ))}
        </div>

        {hasMore && (
          <LoadMorePosts
            slug={slugId}
            loaded={initialPosts.length}
            total={authoredPosts.length}
            sort="lastmodified"
            collections={collectionsWithAuthors}
          />
        )}
      </section>
    )}
  </Fragment>
</TeamLayout>
