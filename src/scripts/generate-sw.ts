// src/scripts/generate-sw.ts
import fs from 'fs/promises';
import path from 'path';
import { siteDefaults } from '../config/siteDefaults';
import manifest from '../data/assets-manifest.json';

const swPath = path.resolve('./public/sw.js');
const offlineHtmlPath = path.resolve('./public/offline.html');

// Cache name
const cacheNameSlug = (siteDefaults.siteName || 'site').replace(/\s+/g, '-').toLowerCase();
const cacheVersion = Math.random().toString(36).substring(2, 8);
const CACHE_NAME = `${cacheNameSlug}-cache-${cacheVersion}`;

// CDN prefix
const cdn = (siteDefaults.cdnPath || '').replace(/\/+$/, '');

// Utility: Add CDN prefix if local path
function addCDNPrefix(p: string): string {
  if (!p) return '';
  if (cdn && !/^https?:\/\//.test(p)) return `${cdn}${p}`;
  return p;
}

// Utility: Get asset file paths
function extractPaths(section: Record<string, { file: string }> | undefined): string[] {
  if (!section) return [];
  return Object.values(section).map(entry => entry.file).filter(Boolean);
}

// Utility: Check if public file exists
async function fileExists(publicPath: string): Promise<boolean> {
  const fullPath = path.resolve('./public', publicPath.replace(/^\//, ''));
  try {
    await fs.access(fullPath);
    return true;
  } catch {
    return false;
  }
}

// Ensure offline.html exists
async function ensureOfflineHtml() {
  try {
    await fs.access(offlineHtmlPath);
  } catch {
    const title = siteDefaults.siteName || 'Offline';
    const description = siteDefaults.description || 'You are currently offline.';
    const html = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>${title} - Offline</title>
  <style>
    html, body {
      margin: 0; padding: 0;
      font-family: system-ui, sans-serif;
      text-align: center;
      display: flex;
      flex-direction: column;
      justify-content: center;
      min-height: 100vh;
      background-color: #f8f8f8;
    }
    h1 { color: #444; font-size: 1.8rem; }
    p { color: #777; font-size: 1rem; }
  </style>
</head>
<body>
  <h1>${title}</h1>
  <p>${description}</p>
  <p>Please check your internet connection.</p>
</body>
</html>
    `.trim();
    await fs.writeFile(offlineHtmlPath, html, 'utf8');
    console.log('📝 Created fallback offline.html');
  }
}

// === Generate and write SW ===
await ensureOfflineHtml();

const jsPaths = extractPaths((manifest as any).js);
const cssPaths = [
  ...extractPaths((manifest as any).css?.main),
  ...extractPaths((manifest as any).css?.nonCritical),
  ...extractPaths((manifest as any).css?.preload)
];

const additionalPaths = siteDefaults.serviceWorkerPaths ?? [];

const allPaths = [
  '/',
  '/offline.html',
  ...cssPaths,
  ...jsPaths,
  ...additionalPaths
];

// Filter to include only existing files (for local, not remote)
const filteredPaths = await Promise.all(
  allPaths.map(async (p) => {
    if (/^https?:\/\//.test(p)) return p;
    const exists = await fileExists(p);
    return exists ? p : null;
  })
);

const precachePaths = [...new Set(filteredPaths.filter((p): p is string => Boolean(p)))].map(addCDNPrefix);

const swContent = `
// ✅ Auto-generated by generate-sw.ts
const CACHE_NAME = '${CACHE_NAME}';
const PRECACHE_URLS = ${JSON.stringify(precachePaths, null, 2)};

self.addEventListener('install', (event) => {
  console.log('[SW] Installing...');
  self.skipWaiting();
  event.waitUntil(
    caches.open(CACHE_NAME).then(async (cache) => {
      for (const url of PRECACHE_URLS) {
        try {
          const res = await fetch(url, { credentials: 'same-origin' });
          if (res.ok) {
            await cache.put(url, res.clone());
          } else {
            console.warn('[SW] Skipped caching (not OK):', url);
          }
        } catch (e) {
          console.warn('[SW] Failed to fetch during install:', url, e);
        }
      }
    })
  );
});

self.addEventListener('activate', (event) => {
  console.log('[SW] Activating...');
  event.waitUntil(
    caches.keys().then((keys) =>
      Promise.all(
        keys.map((key) => {
          if (key !== CACHE_NAME) {
            console.log('[SW] Removing old cache:', key);
            return caches.delete(key);
          }
        })
      )
    )
  );
  return self.clients.claim();
});

self.addEventListener('fetch', (event) => {
  const req = event.request;

  // Only handle GET requests
  if (req.method !== 'GET') return;

  const url = new URL(req.url);

  // Ignore cross-origin requests
  if (url.origin !== self.location.origin) return;

  if (req.destination === 'font') {
    event.respondWith(staleWhileRevalidate(req));
    return;
  }

  if (req.destination === 'style' || req.destination === 'script') {
    event.respondWith(staticCache(req));
    return;
  }

  if (req.mode === 'navigate') {
    event.respondWith(
      fetch(req).catch(() => caches.match('/offline.html'))
    );
    return;
  }

  event.respondWith(
    fetch(req).catch(() => caches.match(req))
  );
});

async function staleWhileRevalidate(req) {
  const cache = await caches.open(CACHE_NAME);
  const cached = await cache.match(req);
  const networkFetch = fetch(req).then(res => {
    if (res.ok) {
      cache.put(req, res.clone());
    }
    return res;
  }).catch(() => null);
  return cached || networkFetch;
}

async function staticCache(req) {
  const cache = await caches.open(CACHE_NAME);
  const cached = await cache.match(req);
  if (cached) return cached;
  try {
    const res = await fetch(req);
    if (res.ok) cache.put(req, res.clone());
    return res;
  } catch {
    return cached;
  }
}
`;


await fs.writeFile(swPath, swContent.trimStart(), 'utf8');
console.log(`✅ Service Worker generated at: ${swPath}`);
console.log(`📦 Cache Name: ${CACHE_NAME}`);
