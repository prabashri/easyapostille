// src/scripts/generate-sw.ts
import fs from 'fs/promises';
import path from 'path';
import { siteDefaults } from '../config/siteDefaults';
import manifest from '../data/assets-manifest.json';

const swPath = path.resolve('./public/sw.js');

// Generate cache name
const cacheNameSlug = (siteDefaults.siteName || 'site').replace(/\s+/g, '-').toLowerCase();
const cacheVersion = Math.random().toString(36).substring(2, 8);
const CACHE_NAME = `${cacheNameSlug}-cache-${cacheVersion}`;

// Remove trailing slash from CDN path
const cdn = (siteDefaults.cdnPath || '').replace(/\/+$/, '');

// Helper: prefix with CDN path if available
function addCDNPrefix(p: string): string {
  if (!p) return '';
  if (cdn && !/^https?:\/\//.test(p)) return `${cdn}${p}`;
  return p;
}

// Helper: extract file paths from section
function extractPaths(section: Record<string, { file: string }> | undefined): string[] {
  if (!section) return [];
  return Object.values(section).map(entry => entry.file).filter(Boolean);
}

// JS, CSS, Fonts, and additional paths
const jsPaths = extractPaths((manifest as any).js);
const cssPaths = [
  ...extractPaths((manifest as any).css?.main),
  ...extractPaths((manifest as any).css?.nonCritical),
  ...extractPaths((manifest as any).css?.preload)
];

const fontPaths = [
  '/fonts/Inter-Regular-Subset.woff2',
  '/fonts/Inter-Bold-Subset.woff2'
];

const additionalPaths = siteDefaults.serviceWorkerPaths ?? [];

const precachePaths = [
  '/',
  '/offline.html',
  ...fontPaths,
  ...cssPaths,
  ...jsPaths,
  ...additionalPaths
]
  .map(addCDNPrefix)
  .filter((v, i, arr) => !!v && arr.indexOf(v) === i); // remove duplicates

// Service Worker content
const swContent = `
// âœ… Auto-generated by generate-sw.ts
const CACHE_NAME = '${CACHE_NAME}';
const PRECACHE_URLS = ${JSON.stringify(precachePaths, null, 2)};

self.addEventListener('install', (event) => {
  console.log('[SW] Installing...');
  self.skipWaiting();
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      return cache.addAll(PRECACHE_URLS);
    })
  );
});

self.addEventListener('activate', (event) => {
  console.log('[SW] Activating...');
  event.waitUntil(
    caches.keys().then((keys) =>
      Promise.all(
        keys.map((key) => {
          if (key !== CACHE_NAME) {
            console.log('[SW] Removing old cache:', key);
            return caches.delete(key);
          }
        })
      )
    )
  );
  return self.clients.claim();
});

self.addEventListener('fetch', (event) => {
  const req = event.request;
  const url = new URL(req.url);

  // Fonts
  if (req.destination === 'font') {
    event.respondWith(staleWhileRevalidate(req));
    return;
  }

  // CSS and JS
  if (req.destination === 'style' || req.destination === 'script') {
    event.respondWith(staticCache(req));
    return;
  }

  // Page Navigation (offline fallback)
  if (req.mode === 'navigate') {
    event.respondWith(
      fetch(req).catch(() => caches.match('/offline.html'))
    );
    return;
  }

  // Default fallback
  event.respondWith(fetch(req).catch(() => caches.match(req)));
});

async function staleWhileRevalidate(req) {
  const cache = await caches.open(CACHE_NAME);
  const cached = await cache.match(req);
  const networkFetch = fetch(req).then(res => {
    if (res.ok) cache.put(req, res.clone());
    return res;
  });
  return cached || networkFetch;
}

async function staticCache(req) {
  const cache = await caches.open(CACHE_NAME);
  const cached = await cache.match(req);
  if (cached) return cached;

  try {
    const res = await fetch(req);
    if (res.ok) cache.put(req, res.clone());
    return res;
  } catch {
    return cached;
  }
}
`;

await fs.writeFile(swPath, swContent.trimStart(), 'utf8');
console.log(`âœ… Service Worker generated at: ${swPath}`);
console.log(`ðŸ“¦ Cache Name: ${CACHE_NAME}`);
