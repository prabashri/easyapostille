---
// src/layouts/TeamLayout.astro
import BaseLayout from './BaseLayout.astro';
import { siteDefaults } from '../config/siteDefaults';
import type { HeadProps } from '../types/HeadProps';
import { Icon } from 'astro-icon/components';
import emailHashes from '../data/email-hash.json';
import ShareLink from '../components/ShareLink.astro';

const emailHashesMap: Record<string, string> = Object.fromEntries(
  Object.entries(emailHashes).map(([slug, obj]) => [slug, obj.sha256])
);

interface Props {
  name: string;
  prefix?: string;
  role?: string;
  highestDegree?: string;
  shortBio?: string;
  experience?: number;
  expertise?: string[];
  awards?: string[];
  affiliation?: string;
  addressing?: string;
  email?: string;
  website?: string;
  joined?: string;
  social?: Record<string, string>;
  featured?: boolean;
  slug?: string;
  canonicalUrl?: string;
  id?: string;
  color?: string;
  useImage?: boolean;
  useInitial?: boolean;
  initialText?: string;
  photo?: string;
  useGravatar?: boolean;
}

const {
  name,
  prefix = '',
  role = '',
  highestDegree = '',
  shortBio = '',
  experience,
  expertise = [],
  awards = [],
  affiliation = '',
  addressing = '',
  email,
  website,
  joined,
  social = {},
  featured = false,
  slug = '',
  canonicalUrl,
  id = '',
  color = '',
  useImage = false,
  useInitial = false,
  initialText,
  photo = '',
  useGravatar = false
} = Astro.props as Props;

const resolvedSlug = slug || id;
const fullCanonical = canonicalUrl || `${siteDefaults.siteUrl}/team/${resolvedSlug}/`;

const headProps: HeadProps = {
  title: `${name}`,
  description: shortBio || `${prefix} ${name} â€“ ${role}`,
  image: photo || siteDefaults.image,
  canonicalUrl: fullCanonical,
  index: true,
  authors: [
    {
      id: resolvedSlug,
      slug: resolvedSlug,
      url: `/team/${resolvedSlug}/`,
      name,
      data: { name, role, photo, email, website, social }
    }
  ],
};


let avatarSrc;
if (useImage && photo) {
  avatarSrc = { type: 'img', src: photo };
} else if (useGravatar && resolvedSlug && emailHashesMap[resolvedSlug]) {
  avatarSrc = {
    type: 'gravatar',
    src: `https://www.gravatar.com/avatar/${emailHashesMap[resolvedSlug]}?s=300`
  };
} else if (useInitial) {
  avatarSrc = {
    type: 'initial',
    color,
    text: initialText || name?.charAt(0) || '?'
  };
} else {
  avatarSrc = { type: 'icon', color };
}
---

<BaseLayout headProps={headProps}>
  <style is:inline>


    .team-photo {
      border-radius: 50%;
      margin-bottom: 1rem;
    }
    .avatar-initial {
      width: 160px;
      height: 160px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      margin: 0 auto 1rem;
      font-size: 3rem;
      font-weight: bold;
      color: white;
    }
    .team-details h3 {
      margin-top: 1.5rem;
    }
    .team-details ul {
      padding-left: 1.25rem;
    }
  </style>

  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('.avatar-initial[data-color], .icon-avatar[data-color]').forEach(el => {
        const clr = el.getAttribute('data-color');
        if (clr) el.style.backgroundColor = clr;
      });
    });
  </script>

  <article class="team-profile" id={id}>
    <header class="team-header pb-1 mi-auto bg-primary-dark col-base-00">
      <div class="mx-w-content mi-auto ta-center">

        {avatarSrc.type === 'img' && <img src={avatarSrc.src} alt={`Photo of ${name}`} width="160" height="160" loading="lazy" class="team-photo" />}
        {avatarSrc.type === 'gravatar' && <img src={avatarSrc.src} alt={`Gravatar of ${name}`} width="160" height="160" loading="lazy" class="team-photo" />}
        {avatarSrc.type === 'initial' && (
          <div class="avatar-initial" data-color={avatarSrc.color || null}>
            {avatarSrc.text}
          </div>
        )}
        {avatarSrc.type === 'icon' && (
          <Icon name="avatar" width="160" height="160" class="team-photo icon-avatar" data-color={avatarSrc.color || null} />
        )}

        <h1>{prefix} {name}</h1>
        {highestDegree && <p class="team-degree">{highestDegree}</p>}
        {role && <p class="team-role bold text-xs pb-05 mb-05">{role}</p>}      
        {shortBio && <p class="team-short-bio">{shortBio}</p>}
      </div>
    </header>

    <section class="team-details mx-w-content mi-auto mb-1 pb-1">
      {affiliation && <p><strong>Affiliation:</strong> {affiliation}</p>}
      {experience && <p><strong>Experience:</strong> {experience} years</p>}
      {joined && <p><strong>Joined:</strong> {new Date(joined).toLocaleDateString()}</p>}
      {addressing && <p><strong>Pronouns:</strong> {addressing}</p>}

      {expertise.length > 0 && (
        <>
          <h3>Expertise</h3>
          <ul>{expertise.map(item => <li>{item}</li>)}</ul>
        </>
      )}

      {awards.length > 0 && (
        <>
          <h3>Awards</h3>
          <ul>{awards.map(award => <li>{award}</li>)}</ul>
        </>
      )}

      {(email || website) && (
        <>
          <h3>Contact</h3>
          <ul>
            {email && <li>Email: <a href={`mailto:${email}`}>{email}</a></li>}
            {website && <li>Website: <a href={website} target="_blank" rel="noopener">{website}</a></li>}
          </ul>
        </>
      )}

      {Object.keys(social).length > 0 && (
        <>
          <h3>Social</h3>
          <ul>
            {Object.entries(social).map(([platform, url]) => (
              <li><a href={url} target="_blank" rel="noopener">{platform}</a></li>
            ))}
          </ul>
        </>
      )}
    </section>
    <ShareLink url={fullCanonical} title={`Share ${name}'s profile`} className="mx-w-content mi-auto mb-1" />

    <section class="team-slot-content mx-w-content mi-auto mb-1 pb-1">      
      <slot />
    </section>
    {/*!-- Posts Section Hook */}
    <slot name="posts" />      
    </section>
  </article>
</BaseLayout>
