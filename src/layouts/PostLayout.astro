---
import BaseLayout from './BaseLayout.astro';
import { siteDefaults } from '../config/siteDefaults';
import type { HeadProps } from '../types/HeadProps';
import { getEntry } from 'astro:content';
import type { DataEntryMap } from 'astro:content';
import TableOfContents from '../components/TableOfContents.astro';
import ResponsiveImage from '../components/ResponsiveImage.astro';

import ShareLink from '../components/ShareLink.astro';

interface Props {
  title?: string;
  description?: string;
  slug?: string;
  canonicalUrl?: string;
  index?: boolean;
  publishedDate?: string;  
  lastModified?: string | null;
  authors?: { id: string }[]; // Simplified for team-only assumption
  tags?: string[];
  categories?: string[];
  keywords?: string[];
  featured?: boolean;
  draft?: boolean;
  faq?: { question: string; answer: string; speakable: boolean }[];
  collection?: string;
  collectionBase?: string;
  heroImage?: string;
  heroImageAlt?: string;
  heroImageTitle?: string;
  heroImageCaption?: string;
  toc?: { id: string; text: string; level: number }[];
  allPosts?: any[];
}

const {
  title,
  description,
  slug,
  canonicalUrl,
  index = true,
  featured = false,
  publishedDate,
  lastModified,
  authors = [],
  tags = [],
  categories = [],
  keywords = [],
  collection = '',  
  collectionBase = '',
  heroImage,
  heroImageAlt,
  heroImageTitle,
  heroImageCaption,
  faq = [],
  toc = [],
  allPosts = []
} = Astro.props as Props;

const fullCanonical = canonicalUrl || `${siteDefaults.siteUrl}${collectionBase}${slug}/`;

const currentIndex = allPosts.findIndex(post => (post.data?.slug || post.slug) === slug);
const prevPost = currentIndex > 0 ? allPosts[currentIndex - 1] : null;
const nextPost = currentIndex < allPosts.length - 1 ? allPosts[currentIndex + 1] : null;

// ‚úÖ Always load authors from the `team` collection
const resolvedAuthors = await Promise.all(
  authors.map(async ({ id }) => {
    try {
      const entry = await getEntry('team', id);
      return entry
        ? {
            id,
            slug: entry.data.slug,
            url: `/team/${entry.data.slug}/`,
            name: entry.data.name ?? entry.data.name ?? id,
            data: entry.data,
          }
        : null;
    } catch {
      return null;
    }
  })
).then((entries) => entries.filter(Boolean));

const headProps: HeadProps = {
  title: `${title}`,
  description,
  image: heroImage || siteDefaults.image,
  type: 'article',
  canonicalUrl: fullCanonical,
  index,
  keywords: tags,
  publishedAt: publishedDate,
  updatedAt: lastModified ?? undefined,
  authors: resolvedAuthors.filter((a): a is NonNullable<typeof a> => a !== null),
  showBreadcrumb: true,
};

---
<BaseLayout headProps={headProps}>
  <Fragment slot="headContent-top" />
  <Fragment slot="headContent-bottom" />

  <style id="post-layout-styles" is:inline>


.post-layout {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-areas:
    "header"
    "hero"
    "toc"
    "content"
    "sidebar"
    "footer";
  gap: 1rem;
  width: 100%;
}

/* Assign grid-areas + max-widths */
.post-header     { grid-area: header; }
.hero-image      { grid-area: hero; width: 100%; }
.toc             { grid-area: toc; }
.post-content    { grid-area: content; max-width: var(--content-width); }
.sidebar         { grid-area: sidebar; }
.post-footer     { grid-area: footer; max-width: var(--content-width); }



/* üñ• Desktop: 3 columns */
@media (min-width: 1280px) {
  .post-layout {
    grid-template-columns:
      1fr minmax(auto, var(--content-width)) 1fr;
    grid-template-areas:
      "header header header"
      "hero hero hero"
      "toc content sidebar"
      "toc footer sidebar";
  }

  .full-mr-unset { margin-right: unset !important; }
  .full-ml-unset { margin-left: unset !important; }

  /* Sticky sidebars */
  .toc {
    max-width: var(--toc-width);
    position: sticky;
    top: 5rem;
    align-self: start;
    max-height: calc(100vh - 5rem);
    overflow: auto;
    margin-inline: auto;
  }
  
}

/* Hide empty */
.sidebar:empty,
.toc:empty {
  display: none;
}

.icon-link:hover {
  background-color: var(--primary-lighter-x) !important;

} 
</style>
  <article id="post-layout" class="post-layout gap">
    <!-- Header -->
    <header class="post-header bg-primary-darker col-base-00 mn-h-230 mx-h-320 h-fit pb-2">
      <div id="post-header-content" class="mx-w-site mi-auto ta-center mb-2">
        <h1 class="post-title">{title}</h1>
        {description && <p class="post-desc">{description}</p>}
        <div class="post-meta text-s mb-1">
          {resolvedAuthors.length > 0 && (
            <div class="post-authors">
              ‚úçÔ∏è By{' '}
              {resolvedAuthors.map((a, i) => {
                const isLast = i === resolvedAuthors.length - 1;
                const isSecondLast = i === resolvedAuthors.length - 2;
                return (
                  <>
                    <a href={a!.url} class="author-link td-underline">{a!.name}</a>
                    {!isLast && (
                      resolvedAuthors.length === 2
                        ? ' and '
                        : isSecondLast
                          ? ', and '
                          : ', '
                    )}
                  </>
                );
              })}
            </div>
          )}
          {(publishedDate || lastModified) && (
            <div class="post-dates text-s">
              {publishedDate && (
                <time datetime={publishedDate}>
                  üìÖ on {new Date(publishedDate).toLocaleDateString()}
                </time>
              )}
              {lastModified && (
                <span class="last-updated-on">
                  Updated: {new Date(lastModified).toLocaleDateString()}
                </span>
              )}
            </div>
          )}
        </div>
      </div>
    </header>

    <!-- Hero Image -->
    {heroImage && (      
      <ResponsiveImage
        src={heroImage}
        alt={heroImageAlt || ''}
        title={heroImageTitle || ''}
        caption={heroImageCaption || ''}
        width="960"
        loading="eager" className='hero-image mx-w-featured w-full mi-auto mt-0-2'
        breakpoints={{ mobile: 320, desktop: 960 }}
      />     
    )}

    {/* Table of Contents wrapped with aside & class "toc" */}
    <TableOfContents toc={toc} heading="On This Page" depth="h2,h3" className="toc as-f-start mb-05 mx-w-content bg-base-00 br ml-auto mr-auto full-mr-unset full-sticky top-20" />

    { /** Content */ }
    <div class="post-content mx-w-content mi-auto mb-05 p-05">
      <slot />
    </div>

    <!-- Sidebars -->
    <aside class="sidebar mx-w-sidebar full-mx-w-sidebar w-full ml-auto mr-auto as-f-start full-ml-unset mb-05 p-05">
    </aside>
    
    <footer id="post-footer" class="post-footer mx-w-content w-full mi-auto mb-05 p-05">
      <ShareLink id="blog-footer-share-links" className="mb-05 p-05" title='share' />
      {faq.length > 0 && (
        <div class="post-faq mb-05 p-05">
          <h3>Frequently Asked Questions</h3>
          <ul>
            {faq.map((item) => (
              <li>
                <strong>{item.question}</strong>
                <p>{item.answer}</p>
              </li>
            ))}
          </ul>
        </div>
      )}
      {tags.length > 0 && (
        <div class="post-footer post-tags p-05 mb-05">
          <h3 class="text-xs uppercase">Keywords</h3>
          <ul class="tag-list flex wrap gap-05 no-bullets">
            {tags.map((tag) => (
              <li><a class="border-primary-light br pi-05 pb-02" href={`/tags/${tag}/`} target="_blank">{tag}</a></li>
            ))}
          </ul>
        </div>
      )}
      {(prevPost || nextPost) && (
        <nav class="post-navigation mb-05 p-05">
          <ul class="flex wrap gap-2 jc-space-between no-list-style-type no-margin">
            <li class="w-50-1 ta-start bg-primary-lighter br">
              {prevPost && (
                <a href={`/${collectionBase}${prevPost.data?.slug || prevPost.slug}/`} class="prev-post flex flex-col bg-primary-light p-05 br">
                  <span class="arrow-icon text-2xs uppercase">‚Üê previous</span>
                  <span class="post-title text-s">{prevPost.data?.title}</span> 
                </a>
              )}
            </li>
            <li class="w-50-1 ta-end bg-primary-lighter br">
              {nextPost && (
                <a href={`/${collectionBase}${nextPost.data?.slug || nextPost.slug}/`} class="next-post flex flex-col bg-primary-light p-05 br">
                  <span class="arrow-icon text-2xs uppercase">‚Üí next</span>
                  <span class="post-title text-s">{nextPost.data?.title}</span>
                </a>
              )}
            </li>
          </ul>
        </nav>
      )}
    </footer>    
  </article>

  <Fragment slot="extraScripts" />
</BaseLayout>


