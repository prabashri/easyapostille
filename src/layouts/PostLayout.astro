---
import BaseLayout from './BaseLayout.astro';
import { siteDefaults } from '../config/siteDefaults';
import type { HeadProps } from '../types/HeadProps';
import { getEntry } from 'astro:content';
import type { DataEntryMap } from 'astro:content';
import TableOfContents from '../components/TableOfContents.astro';
import ResponsiveImage from '../components/ResponsiveImage.astro';

interface Props {
  title?: string;
  description?: string;
  slug?: string;
  canonicalUrl?: string;
  index?: boolean;
  publishedDate?: string;  
  lastModified?: string | null;
  authors?: { id: string }[]; // Simplified for team-only assumption
  tags?: string[];
  category?: string;
  keywords?: string[];
  featured?: boolean;
  draft?: boolean;
  faq?: { question: string; answer: string; speakable: boolean }[];
  collection?: string;
  collectionBase?: string;
  heroImage?: string;
  heroImageAlt?: string;
  heroImageTitle?: string;
  heroImageCaption?: string;
  toc?: { id: string; text: string; level: number }[];
  allPosts?: any[];
}

const {
  title,
  description,
  slug,
  canonicalUrl,
  index = true,
  featured = false,
  publishedDate,
  lastModified,
  authors = [],
  tags = [],
  category,
  keywords = [],
  collection = '',  
  collectionBase = '',
  heroImage,
  heroImageAlt,
  heroImageTitle,
  heroImageCaption,
  faq = [],
  toc = [],
  allPosts = []
} = Astro.props as Props;

const fullCanonical = canonicalUrl || `${siteDefaults.siteUrl}${collectionBase}${slug}/`;

const currentIndex = allPosts.findIndex(post => (post.data?.slug || post.slug) === slug);
const prevPost = currentIndex > 0 ? allPosts[currentIndex - 1] : null;
const nextPost = currentIndex < allPosts.length - 1 ? allPosts[currentIndex + 1] : null;

// ‚úÖ Always load authors from the `team` collection
const resolvedAuthors = await Promise.all(
  authors.map(async ({ id }) => {
    try {
      const entry = await getEntry('team', id);
      return entry
        ? {
            id,
            slug: entry.data.slug,
            url: `/team/${entry.data.slug}/`,
            name: entry.data.name ?? entry.data.name ?? id,
            data: entry.data,
          }
        : null;
    } catch {
      return null;
    }
  })
).then((entries) => entries.filter(Boolean));

const headProps: HeadProps = {
  title: `${title} | ${siteDefaults.siteName}`,
  description,
  image: heroImage || siteDefaults.image,
  type: 'article',
  canonicalUrl: fullCanonical,
  index,
  keywords: tags,
  publishedAt: publishedDate,
  updatedAt: lastModified ?? undefined,
  authors: resolvedAuthors.filter((a): a is NonNullable<typeof a> => a !== null)
};

---

<BaseLayout headProps={headProps}>
  <Fragment slot="headContent-top" />
  <Fragment slot="headContent-bottom" />

  <article id="post-layout">
    <header id="post-header" class="mx-w-site mi-auto ta-center">
      <h1 class="post-title">{title}</h1>
      {description && <p class="post-desc">{description}</p>}

      <div class="post-meta text-s mb-1">
       {resolvedAuthors.length > 0 && (
          <div class="post-authors">
            ‚úçÔ∏è By{' '}
            {resolvedAuthors.map((a, i) => {
              const isLast = i === resolvedAuthors.length - 1;
              const isSecondLast = i === resolvedAuthors.length - 2;

              return (
                <>
                  <a href={a!.url} class="author-link">{a!.name}</a>
                  {!isLast && (
                    resolvedAuthors.length === 2
                      ? ' and '
                      : isSecondLast
                        ? ', and '
                        : ', '
                  )}
                </>
              );
            })}
          </div>
        )}

        { publishedDate || lastModified ? (
          <div class="post-dates">
            {publishedDate && <time datetime={publishedDate}>üìÖ on {new Date(publishedDate).toLocaleDateString()}</time>}
            {lastModified && (
              <span class="last-updated-on"> Updated: {new Date(lastModified).toLocaleDateString()}</span>
            )}
          </div>
        ) : null}
      </div>
      <div id="hero-image" class="mx-w-960 w-full mi-auto">
        {heroImage && (
          <ResponsiveImage
            src={heroImage}
            alt={heroImageAlt || ''}
            title={heroImageTitle || ''}
            caption={heroImageCaption || ''}
            width="960"
            loading="eager"
            
          />
        )}
      </div>
    </header>
    

    {toc.length > 0 && (
      <aside class="post-toc">
        <h2>Contents</h2>
        <ul>
          {toc.map((item) => (
            <li><a href={`#${item.id}`}>{item.text}</a></li>
          ))}
        </ul>
      </aside>
    )}
    <TableOfContents toc={toc} heading="On This Page" depth="h2,h3" />
    <div class="post-content mx-w-content mi-auto mb-2">
      <slot />
    </div>

    {tags.length > 0 && (
      <footer class="post-tags">
        <h3>Tags</h3>
        <ul>
          {tags.map((tag) => (
            <li><a href={`/tags/${tag}/`}>{tag}</a></li>
          ))}
        </ul>
      </footer>
    )}

    {(prevPost || nextPost) && (
      <nav class="post-navigation mt-2">
        <ul class="flex wrap gap-2 jc-space-between no-list-style-type no-margin">
          <li class="w-50-1">
            {prevPost && (
              <a href={`/${collection}/${prevPost.data?.slug || prevPost.slug}/`} class="prev-post">
                ‚Üê {prevPost.data?.title}
              </a>
            )}
          </li>
          <li class="w-50-1 ta-right">
            {nextPost && (
              <a href={`/${collection}/${nextPost.data?.slug || nextPost.slug}/`} class="next-post">
                {nextPost.data?.title} ‚Üí
              </a>
            )}
          </li>
        </ul>
      </nav>
    )}
  </article>

  <Fragment slot="extraScripts" />
</BaseLayout>
